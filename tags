!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-athonly	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--athonly<\/kbd><a name="-athonly">&nbsp;&nbsp;&nbsp;&nbsp;ATH $/;"	a
-help	lame/doc/html/switchs.html	/^    <strong>* <kbd>--help<\/kbd><a name="-help">&nbsp;&nbsp;&nbsp;&nbsp;help<\/a><\/strong> $/;"	a
-highpass	lame/doc/html/switchs.html	/^    <strong>* <kbd>--highpass<\/kbd><a name="-highpass">&nbsp;&nbsp;&nbsp;&nbsp;highpass $/;"	a
-highpass-width	lame/doc/html/switchs.html	/^    <strong>* <kbd>--highpass-width<\/kbd><a name="-highpass-width">&nbsp;&nbsp;&nbsp;&nbsp;width $/;"	a
-lowpass	lame/doc/html/switchs.html	/^    <strong>* <kbd>--lowpass<\/kbd><a name="-lowpass">&nbsp;&nbsp;&nbsp;&nbsp;lowpass $/;"	a
-lowpass-width	lame/doc/html/switchs.html	/^    <strong>* <kbd>--lowpass-width<\/kbd><a name="-lowpass-width">&nbsp;&nbsp;&nbsp;&nbsp;width $/;"	a
-mp3input	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--mp3input<\/kbd><a name="-mp3input">&nbsp;&nbsp;&nbsp;&nbsp;mp3 $/;"	a
-noath	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--noath<\/kbd><a name="-noath">&nbsp;&nbsp;&nbsp;&nbsp;no $/;"	a
-nohist	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--nohist<\/kbd><a name="-nohist">&nbsp;&nbsp;&nbsp;&nbsp;disable $/;"	a
-nores	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--nores<\/kbd><a name="-nores">&nbsp;&nbsp;&nbsp;&nbsp;disable $/;"	a
-noshort	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--noshort<\/kbd><a name="-noshort">&nbsp;&nbsp;&nbsp;&nbsp;disable $/;"	a
-preset	lame/doc/html/switchs.html	/^    <strong>* <kbd>--preset phone\/voice\/fm\/tape\/hifi\/cd\/studio<\/kbd> <a name="-preset">&nbsp;&nbsp;&nbsp;&nbsp;use $/;"	a
-resample	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--resample<\/kbd><a name="-resample">&nbsp;&nbsp;&nbsp;&nbsp;output $/;"	a
-voice	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>--voice<\/kbd><a name="-voice">&nbsp;&nbsp;&nbsp;&nbsp;voice $/;"	a
352	lame/doc/html/node6.html	/^<A NAME="352">&#160;<\/A><I>audio compression<\/I>, <A NAME="354">&#160;<\/A><I>audio $/;"	a
356	lame/doc/html/node6.html	/^encoding<\/I>, and <A NAME="356">&#160;<\/A><I>audio decoding<\/I>. This section $/;"	a
358	lame/doc/html/node6.html	/^<P> Audio compression really consists of two parts. The first part, called <A NAME="358">&#160;<\/A><I>encoding<\/I>, $/;"	a
360	lame/doc/html/node6.html	/^  highly compressed form called <A NAME="360">&#160;<\/A><I>bitstream<\/I>. To play $/;"	a
362	lame/doc/html/node6.html	/^  the bitstream on your soundcard, you need the second part, called <A NAME="362">&#160;<\/A><I>decoding<\/I>. $/;"	a
365	lame/doc/html/node6.html	/^  term <A NAME="365">&#160;<\/A><I>bitrate<\/I> when speaking of the strength of $/;"	a
AACS3	lame/psymodel.c	273;"	d	file:
ARCH	lame/Makefile	/^ARCH = $(shell uname -m)$/;"	m
ATH_l	lame/quantize-pvt.c	/^static FLOAT8 ATH_l[SBPSY_l];$/;"	v	file:
ATH_mdct_long	lame/quantize-pvt.c	/^FLOAT8 ATH_mdct_long[576];$/;"	v
ATH_mdct_short	lame/quantize-pvt.c	/^FLOAT8 ATH_mdct_short[192];$/;"	v
ATH_s	lame/quantize-pvt.c	/^static FLOAT8 ATH_s[SBPSY_l];$/;"	v	file:
ATHformula	lame/quantize-pvt.c	/^FLOAT8 ATHformula(lame_global_flags *gfp,FLOAT8 f)$/;"	f
ATHonly	lame/lame.h	/^  int ATHonly;                    \/* only use ATH *\/$/;"	m	struct:__anon8
AUDIOBUFSIZE	lame/mpglib/mpg123.h	35;"	d
AUSHIFT	lame/mpglib/mpg123.h	52;"	d
AddVbrFrame	lame/VbrTag.c	/^void AddVbrFrame(int nStreamPos)$/;"	f
BECLOSESTREAM	lame/Dll/BladeMP3EncDLL.h	/^typedef BE_ERR	(*BECLOSESTREAM)	(HBE_STREAM);$/;"	t
BEDEINITSTREAM	lame/Dll/BladeMP3EncDLL.h	/^typedef BE_ERR	(*BEDEINITSTREAM)	(HBE_STREAM, PBYTE, PDWORD);$/;"	t
BEENCODECHUNK	lame/Dll/BladeMP3EncDLL.h	/^typedef BE_ERR	(*BEENCODECHUNK)	(HBE_STREAM, DWORD, PSHORT, PBYTE, PDWORD);$/;"	t
BEINITSTREAM	lame/Dll/BladeMP3EncDLL.h	/^typedef BE_ERR	(*BEINITSTREAM)		(PBE_CONFIG, PDWORD, PDWORD, PHBE_STREAM);$/;"	t
BEVERSION	lame/Dll/BladeMP3EncDLL.h	/^typedef VOID	(*BEVERSION)		(PBE_VERSION);$/;"	t
BE_CONFIG	lame/Dll/BladeMP3EncDLL.h	/^} BE_CONFIG, *PBE_CONFIG;$/;"	t	typeref:struct:__anon11
BE_CONFIG_LAME	lame/Dll/BladeMP3EncDLL.h	30;"	d
BE_CONFIG_MP3	lame/Dll/BladeMP3EncDLL.h	29;"	d
BE_ERR	lame/Dll/BladeMP3EncDLL.h	/^typedef		unsigned long			BE_ERR;$/;"	t
BE_ERR_BUFFER_TOO_SMALL	lame/Dll/BladeMP3EncDLL.h	45;"	d
BE_ERR_INVALID_FORMAT	lame/Dll/BladeMP3EncDLL.h	41;"	d
BE_ERR_INVALID_FORMAT_PARAMETERS	lame/Dll/BladeMP3EncDLL.h	42;"	d
BE_ERR_INVALID_HANDLE	lame/Dll/BladeMP3EncDLL.h	44;"	d
BE_ERR_NO_MORE_HANDLES	lame/Dll/BladeMP3EncDLL.h	43;"	d
BE_ERR_SUCCESSFUL	lame/Dll/BladeMP3EncDLL.h	40;"	d
BE_MAX_HOMEPAGE	lame/Dll/BladeMP3EncDLL.h	49;"	d
BE_MP3_MODE_DUALCHANNEL	lame/Dll/BladeMP3EncDLL.h	55;"	d
BE_MP3_MODE_JSTEREO	lame/Dll/BladeMP3EncDLL.h	54;"	d
BE_MP3_MODE_MONO	lame/Dll/BladeMP3EncDLL.h	56;"	d
BE_MP3_MODE_STEREO	lame/Dll/BladeMP3EncDLL.h	53;"	d
BE_VERSION	lame/Dll/BladeMP3EncDLL.h	/^} BE_VERSION, *PBE_VERSION;			$/;"	t	typeref:struct:__anon16
BF_BitstreamElement	lame/formatBitstream.h	/^} BF_BitstreamElement;$/;"	t	typeref:struct:__anon1
BF_BitstreamFrame	lame/formatBitstream.c	/^BF_BitstreamFrame( BF_FrameData *frameInfo, BF_FrameResults *results )$/;"	f
BF_BitstreamPart	lame/formatBitstream.h	/^} BF_BitstreamPart;$/;"	t	typeref:struct:__anon2
BF_FlushBitstream	lame/formatBitstream.c	/^BF_FlushBitstream( BF_FrameData *frameInfo, BF_FrameResults *results )$/;"	f
BF_FrameData	lame/formatBitstream.h	/^typedef struct BF_FrameData$/;"	s
BF_FrameData	lame/formatBitstream.h	/^} BF_FrameData;$/;"	t	typeref:struct:BF_FrameData
BF_FrameResults	lame/formatBitstream.h	/^typedef struct BF_FrameResults$/;"	s
BF_FrameResults	lame/formatBitstream.h	/^} BF_FrameResults;$/;"	t	typeref:struct:BF_FrameResults
BF_LoadHolderFromBitstreamPart	lame/formatBitstream.c	/^BF_PartHolder *BF_LoadHolderFromBitstreamPart( BF_PartHolder *theHolder, BF_BitstreamPart *thePart )$/;"	f
BF_NewHolderFromBitstreamPart	lame/formatBitstream.c	/^BF_PartHolder *BF_NewHolderFromBitstreamPart( BF_BitstreamPart *thePart )$/;"	f
BF_PartHolder	lame/formatBitstream.h	/^typedef struct BF_PartHolder$/;"	s
BF_PartHolder	lame/formatBitstream.h	/^} BF_PartHolder;$/;"	t	typeref:struct:BF_PartHolder
BF_PartLength	lame/formatBitstream.c	/^BF_PartLength( BF_BitstreamPart *part )$/;"	f
BF_addElement	lame/formatBitstream.c	/^BF_PartHolder *BF_addElement( BF_PartHolder *thePH, BF_BitstreamElement *theElement )$/;"	f
BF_addEntry	lame/formatBitstream.c	/^BF_PartHolder *BF_addEntry( BF_PartHolder *thePH, u_int value, u_int length )$/;"	f
BF_freePartHolder	lame/formatBitstream.c	/^BF_PartHolder *BF_freePartHolder( BF_PartHolder *thePH )$/;"	f
BF_newPartHolder	lame/formatBitstream.c	/^BF_PartHolder *BF_newPartHolder( int max_elements )$/;"	f
BF_resizePartHolder	lame/formatBitstream.c	/^BF_PartHolder *BF_resizePartHolder( BF_PartHolder *oldPH, int max_elements )$/;"	f
BINSEARCH_DOWN	lame/quantize-pvt.c	/^    BINSEARCH_DOWN$/;"	e	enum:__anon17	file:
BINSEARCH_NONE	lame/quantize-pvt.c	/^    BINSEARCH_NONE,$/;"	e	enum:__anon17	file:
BINSEARCH_UP	lame/quantize-pvt.c	/^    BINSEARCH_UP, $/;"	e	enum:__anon17	file:
BITS_IN_A_BYTE	lame/util.h	58;"	d
BLKSIZE	lame/encoder.h	65;"	d
BLKSIZE_s	lame/encoder.h	67;"	d
BOOL	lame/mpglib/mpglib.h	/^	typedef int BOOL; \/* windef.h contains the same definition *\/$/;"	t
BOOL	lame/mpglib/mpglib.h	37;"	d
BRHIST_BARMAX	lame/brhist.c	8;"	d	file:
BRHIST_H_INCLUDED	lame/brhist.h	3;"	d
BRHIST_SWITCH	lame/Makefile	/^   BRHIST_SWITCH = -DBRHIST$/;"	m
BRHIST_SWITCH	lame/Makefile	/^BRHIST_SWITCH = $/;"	m
BUFFER_SIZE	lame/util.h	82;"	d
BYTES_FLAG	lame/VbrTag.h	44;"	d
BitCount	lame/formatBitstream.c	/^static int BitCount       = 0;$/;"	v	file:
Bit_stream_struc	lame/util.h	/^} Bit_stream_struc;$/;"	t	typeref:struct:bit_stream_struc
BitrateIndex	lame/util.c	/^int BitrateIndex($/;"	f
BitsRemaining	lame/formatBitstream.c	/^static int BitsRemaining  = 0;$/;"	v	file:
Bmax	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-B<\/kbd><a name="Bmax">&nbsp;&nbsp;&nbsp;&nbsp;maximum VBR $/;"	a
Bytes2Hex	lame/ieeefloat.c	/^Bytes2Hex(register char *bytes, register char *hex, register int nBytes)$/;"	f
CBANDS	lame/encoder.h	52;"	d
CC	lame/Makefile	/^   CC = $(BE_C_COMPILER)$/;"	m
CC	lame/Makefile	/^   CC = cc	$/;"	m
CC	lame/Makefile	/^   CC = cc$/;"	m
CC	lame/Makefile	/^   CC = gcc$/;"	m
CC	lame/Makefile	/^CC = gcc$/;"	m
CC	lame/mpglib/Makefile	/^CC=gcc$/;"	m
CC_OPTS	lame/Makefile	/^   CC_OPTS =  -O3 -fomit-frame-pointer -funroll-loops -ffast-math  -finline-functions -Wall$/;"	m
CC_OPTS	lame/Makefile	/^   CC_OPTS = -O -xCC  	$/;"	m
CC_OPTS	lame/Makefile	/^   CC_OPTS = -O3$/;"	m
CC_OPTS	lame/Makefile	/^   CC_OPTS = -O9 -ffast-math -funroll-loops -fomit-frame-pointer$/;"	m
CC_OPTS	lame/Makefile	/^   CC_OPTS = -O9 -fomit-frame-pointer -march=pentium \\$/;"	m
CC_OPTS	lame/Makefile	/^   CC_OPTS = -fast -O3 -std -g3 -non_shared$/;"	m
CC_OPTS	lame/Makefile	/^   CC_OPTS = -opt all$/;"	m
CC_OPTS	lame/Makefile	/^CC_OPTS =       -O4 -Wall -fomit-frame-pointer -ffast-math -funroll-loops \\$/;"	m
CC_OPTS	lame/Makefile	/^CC_OPTS =  -O$/;"	m
CC_SWITCHES	lame/Makefile	/^CC_SWITCHES = -DNDEBUG -D__NO_MATH_INLINES $(CC_OPTS) $(SNDLIB) $(GTK) $(BRHIST_SWITCH)$/;"	m
CFLAGS	lame/mpglib/Makefile	/^CFLAGS=-Wall -g$/;"	m
CHILD_LINKS	lame/doc/html/node5.html	/^<!--Table of Child-Links--> <A NAME="CHILD_LINKS">&#160;<\/A> $/;"	a
CHILD_LINKS	lame/doc/html/node6.html	/^<FONT FACE = Helvetica > <!--Table of Child-Links--> <A NAME="CHILD_LINKS"><strong>Subsections<\/strong><\/A> $/;"	a
CLINK	lame/portableio.h	63;"	d
CLINK	lame/portableio.h	65;"	d
CLIPPING	wave.h	9;"	d
COS1	lame/mpglib/layer3.c	/^static real COS1[12][6];$/;"	v	file:
COS6_1	lame/mpglib/layer3.c	/^static real COS6_1,COS6_2;$/;"	v	file:
COS6_2	lame/mpglib/layer3.c	/^static real COS6_1,COS6_2;$/;"	v	file:
COS9	lame/mpglib/layer3.c	/^static real COS9[9];$/;"	v	file:
CPP_OPTS	lame/Makefile	/^CPP_OPTS = -DHAVEMPGLIB -DLAMEPARSE$/;"	m
CRC16_POLYNOMIAL	lame/util.h	60;"	d
CRC_BF_addEntry	lame/l3bitstream.c	/^static BF_PartHolder *CRC_BF_addEntry( BF_PartHolder *thePH, u_int value, u_int length )$/;"	f	file:
CURRENT_STRUCT_SIZE	lame/Dll/BladeMP3EncDLL.c	/^const int CURRENT_STRUCT_SIZE=sizeof(BE_CONFIG);$/;"	v
CURRENT_STRUCT_VERSION	lame/Dll/BladeMP3EncDLL.c	/^const int CURRENT_STRUCT_VERSION=1;$/;"	v
CheckVbrTag	lame/VbrTag.c	/^int CheckVbrTag(unsigned char *buf)$/;"	f
CloseSndFile	lame/get_audio.c	/^void CloseSndFile(lame_global_flags *gfp)$/;"	f
ConvertFromIeeeDouble	lame/ieeefloat.c	/^ConvertFromIeeeDouble(char* bytes)$/;"	f
ConvertFromIeeeExtended	lame/ieeefloat.c	/^ConvertFromIeeeExtended(char* bytes)$/;"	f
ConvertFromIeeeSingle	lame/ieeefloat.c	/^ConvertFromIeeeSingle(char* bytes)$/;"	f
ConvertToIeeeDouble	lame/ieeefloat.c	/^ConvertToIeeeDouble(defdouble num, char *bytes)$/;"	f
ConvertToIeeeExtended	lame/ieeefloat.c	/^ConvertToIeeeExtended(defdouble num, char *bytes)$/;"	f
ConvertToIeeeSingle	lame/ieeefloat.c	/^ConvertToIeeeSingle(defdouble num, char* bytes)$/;"	f
CreateI4	lame/VbrTag.c	/^void CreateI4(unsigned char *buf, int nValue)$/;"	f
D	wave.cpp	/^  DataChunk D;$/;"	m	struct:audio	file:
D192_3	lame/l3side.h	/^typedef FLOAT8	D192_3[192][3];$/;"	t
D576	lame/l3side.h	/^typedef FLOAT8	D576[576];$/;"	t
DCT12_PART1	lame/mpglib/layer3.c	1323;"	d	file:
DCT12_PART2	lame/mpglib/layer3.c	1336;"	d	file:
DEBUGXX	lame/vbrquantize.c	33;"	d	file:
DECDELAY	lame/encoder.h	45;"	d
DEP	lame/Makefile	/^DEP = $(c_sources:.c=.d)$/;"	m
DEXP_MAX	lame/ieeefloat.c	199;"	d	file:
DEXP_OFFSET	lame/ieeefloat.c	200;"	d	file:
DEXP_POSITION	lame/ieeefloat.c	202;"	d	file:
DEXP_SIZE	lame/ieeefloat.c	201;"	d	file:
DParts	lame/ieeefloat.c	/^union DParts {$/;"	u	file:
DataChunk	wave.h	/^} DataChunk;$/;"	t	typeref:struct:__anon29
Decimation	wave.cpp	/^struct audio *Decimation(struct audio *ap)$/;"	f
DetermineByteOrder	lame/util.c	/^enum byte_order DetermineByteOrder(void)$/;"	f
DispErr	lame/Dll/BladeMP3EncDLL.c	/^void DispErr(LPSTR strErr)$/;"	f
DllMain	lame/Dll/BladeMP3EncDLL.c	/^BOOL APIENTRY DllMain(HANDLE hModule, $/;"	f
Double	lame/ieeefloat.h	/^ typedef double Double;$/;"	t
Double	lame/ieeefloat.h	/^ typedef short double Double;$/;"	t
ENCDELAY	lame/encoder.h	32;"	d
ENCODER_DOT_H	lame/encoder.h	2;"	d
EParts	lame/ieeefloat.c	/^union EParts {$/;"	u	file:
ExitMP3	lame/mpglib/interface.c	/^void ExitMP3(struct mpstr *mp)$/;"	f
ExtractI4	lame/VbrTag.c	/^static int ExtractI4(unsigned char *buf)$/;"	f	file:
F	wave.cpp	/^  FormatChunk F;$/;"	m	struct:audio	file:
F8size	lame/quantize-pvt.c	934;"	d	file:
F8size	lame/quantize-pvt.c	937;"	d	file:
F8size	lame/quantize-pvt.c	948;"	d	file:
F8size	lame/quantize-pvt.c	951;"	d	file:
F8type	lame/quantize-pvt.c	933;"	d	file:
F8type	lame/quantize-pvt.c	936;"	d	file:
F8type	lame/quantize-pvt.c	947;"	d	file:
F8type	lame/quantize-pvt.c	950;"	d	file:
FALSE	lame/mpglib/mpg123.h	37;"	d
FALSE	lame/util.h	20;"	d
FFT	fft/fft3.c	/^void FFT(double data[], int n_point, int inverse_option)$/;"	f
FFTOFFSET	lame/encoder.h	40;"	d
FFT_Calc	fft/fft.c	/^struct twinddle_factor *FFT_Calc($/;"	f
FFT_Calc	fft/main.c	/^struct twinddle_factor *FFT_Calc($/;"	f
FFT_H	lame/fft.h	2;"	d
FLOAT	lame/Dll/BladeMP3EncDLL.h	62;"	d
FLOAT	lame/machine.h	/^	typedef float FLOAT;$/;"	t
FLOAT8	lame/machine.h	/^typedef double FLOAT8;  $/;"	t
FLOAT8_is_double	lame/machine.h	86;"	d
FRAMES_AND_BYTES	lame/VbrTag.h	50;"	d
FRAMES_FLAG	lame/VbrTag.h	43;"	d
FSIZE	lame/mpglib/main.c	19;"	d	file:
FloatToUnsigned	lame/ieeefloat.c	77;"	d	file:
FloatToUnsigned	lame/ieeefloat.c	80;"	d	file:
FormatChunk	wave.h	/^} FormatChunk;$/;"	t	typeref:struct:__anon28
GB	main.cpp	13;"	d	file:
GET_AUDIO_H_INCLUDED	lame/get_audio.h	22;"	d
GTK	lame/Makefile	/^   GTK = -DHAVEGTK `gtk-config --cflags`$/;"	m
GTK	lame/Makefile	/^   GTK = -DHAVEGTK `gtk12-config --cflags`$/;"	m
GTK	lame/Makefile	/^GTK = $/;"	m
GTKANAL_DOT_H	lame/gtkanal.h	2;"	d
GTKLIBS	lame/Makefile	/^   GTKLIBS = `gtk-config --libs` $/;"	m
GTKLIBS	lame/Makefile	/^   GTKLIBS = `gtk12-config --libs` $/;"	m
GTKLIBS	lame/Makefile	/^GTKLIBS = $/;"	m
GetHexSymbol	lame/ieeefloat.c	/^GetHexSymbol(register int x)$/;"	f
GetHexValue	lame/ieeefloat.c	/^GetHexValue(register int x)$/;"	f
GetSndBitrate	lame/get_audio.c	/^int GetSndBitrate(void)$/;"	f
GetSndChannels	lame/get_audio.c	/^int GetSndChannels(void)$/;"	f
GetSndSampleRate	lame/get_audio.c	/^int GetSndSampleRate(void)$/;"	f
GetSndSamples	lame/get_audio.c	/^unsigned long GetSndSamples(void)$/;"	f
GetVbrTag	lame/VbrTag.c	/^int GetVbrTag(VBRTAGDATA *pTagData,  unsigned char *buf)$/;"	f
HAN_SIZE	lame/util.h	59;"	d
HBE_STREAM	lame/Dll/BladeMP3EncDLL.h	/^typedef		unsigned long			HBE_STREAM;$/;"	t
HBLKSIZE	lame/encoder.h	66;"	d
HBLKSIZE_s	lame/encoder.h	68;"	d
HDRCMPMASK	lame/mpglib/common.c	61;"	d	file:
HEADER	wave.h	/^} HEADER;$/;"	t	typeref:struct:__anon25
HIGH_QUALITY	lame/Dll/BladeMP3EncDLL.h	/^	HIGH_QUALITY,$/;"	e	enum:__anon10
HTN	lame/tables.h	26;"	d
HUFFBITS	lame/tables.h	25;"	d
Hex2Bytes	lame/ieeefloat.c	/^Hex2Bytes(register char *hex, register char *bytes)$/;"	f
HuffmanCode	lame/l3bitstream.c	/^HuffmanCode( int table_select, int x, int y, unsigned int *code, unsigned int *ext, int *cbits, int *xbits )$/;"	f
Huffmancodebits	lame/l3bitstream.c	/^Huffmancodebits( BF_PartHolder **pph, int *ix, gr_info *gi )$/;"	f	file:
I192_3	lame/l3side.h	/^typedef int	I192_3[192][3];$/;"	t
I576	lame/l3side.h	/^typedef int	I576[576];$/;"	t
ID	wave.h	8;"	d
ID3TAGDATA	lame/id3tag.h	/^}   ID3TAGDATA;$/;"	t	typeref:struct:__anon9
ID3TAG_H_INCLUDED	lame/id3tag.h	2;"	d
IEEE	lame/ieeefloat.c	433;"	d	file:
IEEE	lame/ieeefloat.c	436;"	d	file:
IEEE	lame/ieeefloat.c	439;"	d	file:
IEEE	lame/ieeefloat.c	442;"	d	file:
IEEE	lame/ieeefloat.c	445;"	d	file:
IEEE	lame/ieeefloat.c	449;"	d	file:
IEEE	lame/ieeefloat.c	452;"	d	file:
IEEE_FLOAT_H__	lame/ieeefloat.h	2;"	d
IFF_AIFF	lame/get_audio.h	/^} IFF_AIFF;$/;"	t	typeref:struct:IFF_AIFF_struct
IFF_AIFF_struct	lame/get_audio.h	/^typedef struct  IFF_AIFF_struct {$/;"	s
IFF_ID_AIFF	lame/get_audio.h	30;"	d
IFF_ID_COMM	lame/get_audio.h	31;"	d
IFF_ID_FORM	lame/get_audio.h	29;"	d
IFF_ID_MPEG	lame/get_audio.h	33;"	d
IFF_ID_SSND	lame/get_audio.h	32;"	d
III_FlushBitstream	lame/l3bitstream.c	/^III_FlushBitstream(void)$/;"	f
III_antialias	lame/mpglib/layer3.c	/^static void III_antialias(real xr[SBLIMIT][SSLIMIT],struct gr_info_s *gr_info)$/;"	f	file:
III_dequantize_sample	lame/mpglib/layer3.c	/^static int III_dequantize_sample(real xr[SBLIMIT][SSLIMIT],int *scf,$/;"	f	file:
III_format_bitstream	lame/l3bitstream.c	/^III_format_bitstream( lame_global_flags *gfp,$/;"	f
III_get_scale_factors_1	lame/mpglib/layer3.c	/^static int III_get_scale_factors_1(int *scf,struct gr_info_s *gr_info)$/;"	f	file:
III_get_scale_factors_2	lame/mpglib/layer3.c	/^static int III_get_scale_factors_2(int *scf,struct gr_info_s *gr_info,int i_stereo)$/;"	f	file:
III_get_side_info_1	lame/mpglib/layer3.c	/^static void III_get_side_info_1(struct III_sideinfo *si,int stereo,$/;"	f	file:
III_get_side_info_2	lame/mpglib/layer3.c	/^static void III_get_side_info_2(struct III_sideinfo *si,int stereo,$/;"	f	file:
III_hybrid	lame/mpglib/layer3.c	/^static void III_hybrid(real fsIn[SBLIMIT][SSLIMIT],real tsOut[SSLIMIT][SBLIMIT],$/;"	f	file:
III_i_stereo	lame/mpglib/layer3.c	/^static void III_i_stereo(real xr_buf[2][SBLIMIT][SSLIMIT],int *scalefac,$/;"	f	file:
III_psy_ratio	lame/l3side.h	/^} III_psy_ratio;$/;"	t	typeref:struct:__anon20
III_psy_xmin	lame/l3side.h	/^} III_psy_xmin;$/;"	t	typeref:struct:__anon19
III_scalefac_t	lame/l3side.h	/^} III_scalefac_t;  \/* [gr][ch] *\/$/;"	t	typeref:struct:__anon24
III_side_info_t	lame/l3side.h	/^	} III_side_info_t;$/;"	t	typeref:struct:__anon22
III_sideinfo	lame/mpglib/mpg123.h	/^struct III_sideinfo$/;"	s
INLINE	lame/machine.h	60;"	d
INLINE	lame/machine.h	62;"	d
INLINE	lame/machine.h	64;"	d
IPOW20	lame/machine.h	51;"	d
IXMAX_VAL	lame/quantize-pvt.h	4;"	d
InitFormatBitStream	lame/formatBitstream.c	/^void InitFormatBitStream(void)$/;"	f
InitMP3	lame/mpglib/interface.c	/^BOOL InitMP3(struct mpstr *mp) $/;"	f
InitParams	lame/Dll/BladeMP3EncDLL.c	/^static void InitParams()$/;"	f	file:
InitVbrTag	lame/VbrTag.c	/^int InitVbrTag(Bit_stream_struc* pBs,int nVersion, int nMode, int SampIndex)$/;"	f
KB	main.cpp	11;"	d	file:
L3BITSTREAM_PVT_H	lame/l3bitstream-pvt.h	28;"	d
L3PSY_DOT_H_	lame/psymodel.h	2;"	d
L3_BITSTREAM_H	lame/l3bitstream.h	31;"	d
L3_SIDE_H	lame/l3side.h	10;"	d
L3_huffman_coder_count1	lame/l3bitstream.c	/^L3_huffman_coder_count1( BF_PartHolder **pph, struct huffcodetab *h, int v, int w, int x, int y )$/;"	f
L3para_read	lame/psymodel.c	/^void L3para_read(FLOAT8 sfreq, int *numlines_l,int *numlines_s, int *partition_l, FLOAT8 *minval,$/;"	f
L3psycho_anal	lame/psymodel.c	/^void L3psycho_anal( lame_global_flags *gfp,$/;"	f
LAME_ALPHAVERSION	lame/version.h	27;"	d
LAME_BETAVERSION	lame/version.h	28;"	d
LAME_H_INCLUDE	lame/lame.h	21;"	d
LAME_H_INCLUDED	lame/version.h	23;"	d
LAME_MAJOR_VERSION	lame/version.h	25;"	d
LAME_MAXMP3BUFFER	lame/lame.h	26;"	d
LAME_MINOR_VERSION	lame/version.h	26;"	d
LAMEmainbits	lame/gtkanal.h	/^  int LAMEmainbits[2][2];$/;"	m	struct:__anon7
LAMEqss	lame/gtkanal.h	/^  int LAMEqss[2][2];$/;"	m	struct:__anon7
LAMEsfb	lame/gtkanal.h	/^  double LAMEsfb[2][2][SBMAX_l];$/;"	m	struct:__anon7
LAMEsfb_s	lame/gtkanal.h	/^  double LAMEsfb_s[2][2][3*SBMAX_s];$/;"	m	struct:__anon7
LARGE_BITS	lame/quantize-pvt.h	121;"	d
LHV1	lame/Dll/BladeMP3EncDLL.h	/^			} LHV1;					\/\/ LAME header version 1$/;"	m	union:__anon11::__anon12	typeref:struct:__anon11::__anon12::__anon14
LIBS	lame/Makefile	/^   LIBS =$/;"	m
LIBS	lame/Makefile	/^LIBS    =       -lcpml $/;"	m
LIBS	lame/Makefile	/^LIBS = -lm $/;"	m
LIBSNDFILE	lame/Makefile	/^LIBSNDFILE =  $/;"	m
LIBTERMCAP	lame/Makefile	/^   LIBTERMCAP = -lncurses$/;"	m
LIBTERMCAP	lame/Makefile	/^   LIBTERMCAP = -ltermcap$/;"	m
LIBTERMCAP	lame/Makefile	/^LIBTERMCAP = $/;"	m
LITTLE_ENDIAN	lame/ieeefloat.c	446;"	d	file:
LN_TO_LOG10	lame/psymodel.c	24;"	d	file:
LN_TO_LOG10	lame/psymodel.c	26;"	d	file:
LOG10	lame/util.h	45;"	d
LOG10	lame/util.h	47;"	d
LOG2	lame/util.h	39;"	d
LOG2	lame/util.h	41;"	d
LOOP_DOT_H	lame/quantize.h	31;"	d
LOOP_PVT_H	lame/quantize-pvt.h	2;"	d
LOW_QUALITY	lame/Dll/BladeMP3EncDLL.h	/^	LOW_QUALITY,$/;"	e	enum:__anon10
LongToString	wave.cpp	/^void LongToString(long H_chunkID, char *chunkID)$/;"	f
MACHINE_H_INCLUDED	lame/machine.h	24;"	d
MACRO0	lame/mpglib/layer3.c	1232;"	d	file:
MACRO1	lame/mpglib/layer3.c	1239;"	d	file:
MACRO2	lame/mpglib/layer3.c	1244;"	d	file:
MAJORVERSION	lame/Dll/BladeMP3EncDLL.c	/^const int MAJORVERSION=1;$/;"	v
MAKEDEP	lame/Makefile	/^   MAKEDEP = -make $/;"	m
MAKEDEP	lame/Makefile	/^   MAKEDEP = -make$/;"	m
MAKEDEP	lame/Makefile	/^   MAKEDEP = -xM$/;"	m
MAKEDEP	lame/Makefile	/^MAKEDEP = -M$/;"	m
MAXFRAMESIZE	lame/mpglib/mpg123.h	48;"	d
MAXMPGLAG	lame/gtkanal.h	7;"	d
MAXNOISEXX	lame/quantize.c	1;"	d	file:
MAX_CHANNELS	lame/formatBitstream.h	20;"	d
MAX_GRANULES	lame/formatBitstream.h	24;"	d
MAX_LENGTH	lame/util.h	80;"	d
MAX_NAME_SIZE	lame/parse.c	11;"	d	file:
MAX_U_32_NUM	lame/util.h	27;"	d
MB	main.cpp	12;"	d	file:
MDCTDELAY	lame/encoder.h	39;"	d
MDCT_DOT_H	lame/newmdct.h	2;"	d
MFSIZE	lame/lame.c	53;"	d	file:
MINIMUM	lame/util.h	79;"	d
MINORVERSION	lame/Dll/BladeMP3EncDLL.c	/^const int MINORVERSION=05;$/;"	v
MP3X_ALPHAVERSION	lame/version.h	37;"	d
MP3X_BETAVERSION	lame/version.h	38;"	d
MP3X_MAJOR_VERSION	lame/version.h	35;"	d
MP3X_MINOR_VERSION	lame/version.h	36;"	d
MP3_ERR	lame/mpglib/mpglib.h	40;"	d
MP3_NEED_MORE	lame/mpglib/mpglib.h	42;"	d
MP3_OK	lame/mpglib/mpglib.h	41;"	d
MPEG1	lame/Dll/BladeMP3EncDLL.h	58;"	d
MPEG1	lame/mpglib/layer3.c	19;"	d	file:
MPEG2	lame/Dll/BladeMP3EncDLL.h	59;"	d
MPEGABase	lame/amiga_mpega.c	/^struct Library  *MPEGABase;$/;"	v	typeref:struct:Library
MPEG_QUALITY	lame/Dll/BladeMP3EncDLL.h	/^} MPEG_QUALITY;$/;"	t	typeref:enum:__anon10
MPG_MD_DUAL_CHANNEL	lame/mpglib/mpg123.h	45;"	d
MPG_MD_DUAL_CHANNEL	lame/util.h	66;"	d
MPG_MD_JOINT_STEREO	lame/mpglib/mpg123.h	44;"	d
MPG_MD_JOINT_STEREO	lame/util.h	65;"	d
MPG_MD_LR_I	lame/util.h	72;"	d
MPG_MD_LR_LR	lame/util.h	71;"	d
MPG_MD_MONO	lame/mpglib/mpg123.h	46;"	d
MPG_MD_MONO	lame/util.h	67;"	d
MPG_MD_MS_I	lame/util.h	74;"	d
MPG_MD_MS_LR	lame/util.h	73;"	d
MPG_MD_STEREO	lame/mpglib/mpg123.h	43;"	d
MPG_MD_STEREO	lame/util.h	64;"	d
MYSideInfo	lame/formatBitstream.c	/^} MYSideInfo;$/;"	t	typeref:struct:__anon6	file:
M_PI	lame/mpglib/mpg123.h	9;"	d
M_SQRT2	lame/mpglib/mpg123.h	12;"	d
MachineIEEEDouble	lame/ieeefloat.c	/^MachineIEEEDouble(char* bytes)$/;"	f
MachineIEEESingle	lame/ieeefloat.c	/^MachineIEEESingle(char* bytes)$/;"	f
Main_FFT	fft/fft.c	/^struct twinddle_factor *Main_FFT(struct twinddle_factor *input, const int size, int inverse)$/;"	f
Main_FFT	fft/main.c	/^struct twinddle_factor *Main_FFT(struct twinddle_factor *input, const int size, int inverse)$/;"	f
Max	lame/util.h	85;"	d
MaybeSwapBytes	lame/ieeefloat.c	/^MaybeSwapBytes(char* bytes, int nBytes)$/;"	f
Min	lame/util.h	84;"	d
NEWBARKXXX	lame/psymodel.c	1032;"	d	file:
NEWS3XX	lame/psymodel.c	274;"	d	file:
NEW_DCT9	lame/mpglib/mpg123.h	19;"	d
NL	lame/newmdct.c	122;"	d	file:
NMT	lame/psymodel.c	279;"	d	file:
NORMAL_QUALITY	lame/Dll/BladeMP3EncDLL.h	/^	NORMAL_QUALITY=0,$/;"	e	enum:__anon10
NORM_TYPE	lame/encoder.h	72;"	d
NS	lame/newmdct.c	121;"	d	file:
NUMBACK	lame/gtkanal.h	8;"	d
NUMPINFO	lame/gtkanal.h	9;"	d
NUMTOCENTRIES	lame/VbrTag.h	48;"	d
NativeByteOrder	lame/util.c	/^enum byte_order NativeByteOrder = order_unknown;$/;"	v	typeref:enum:byte_order
NoiseGen	wave.cpp	/^void NoiseGen(int *noise, long size, int range)$/;"	f
OBJ	lame/Makefile	/^OBJ = $(c_sources:.c=.o)$/;"	m
OLDBUFSIZE	lame/lame.c	881;"	d	file:
OpenSndFile	lame/get_audio.c	/^FILE * OpenSndFile(lame_global_flags *gfp,const char* inPath, int default_samp,$/;"	f
OpenSndFile	lame/get_audio.c	/^FILE * OpenSndFile(lame_global_flags *gfp,const char* lpszFileName, int default_samp,$/;"	f
PBE_CONFIG	lame/Dll/BladeMP3EncDLL.h	/^} BE_CONFIG, *PBE_CONFIG;$/;"	t	typeref:struct:__anon11
PBE_VERSION	lame/Dll/BladeMP3EncDLL.h	/^} BE_VERSION, *PBE_VERSION;			$/;"	t	typeref:struct:__anon16
PGM	lame/Makefile	/^   PGM = lame.exe$/;"	m
PGM	lame/Makefile	/^PGM = lame$/;"	m
PHBE_STREAM	lame/Dll/BladeMP3EncDLL.h	/^typedef		HBE_STREAM				*PHBE_STREAM;$/;"	t
PI	fft/fft.c	8;"	d	file:
PI	fft/fft3.c	25;"	d	file:
PI	fft/main.c	4;"	d	file:
PI	lame/util.h	31;"	d
PI	lame/util.h	33;"	d
PI	wave.h	10;"	d
PORTABLEIO_H__	lame/portableio.h	2;"	d
POW20	lame/machine.h	45;"	d
PRECALC_SIZE	lame/quantize-pvt.h	5;"	d
PSY_ALPHAVERSION	lame/version.h	32;"	d
PSY_BETAVERSION	lame/version.h	33;"	d
PSY_MAJOR_VERSION	lame/version.h	30;"	d
PSY_MINOR_VERSION	lame/version.h	31;"	d
PartHoldersInitialized	lame/l3bitstream.c	/^int PartHoldersInitialized = 0;$/;"	v
PartWriteFcnPtr	lame/formatBitstream.c	/^typedef int (*PartWriteFcnPtr)( BF_BitstreamPart *part, BF_FrameResults *results );$/;"	t	file:
Pinfo	lame/gtkanal.c	/^plotting_data Pinfo[NUMPINFO];$/;"	v
PutVbrTag	lame/VbrTag.c	/^int PutVbrTag(char* lpszFileName,int nVbrScale,int nVersion)$/;"	f
QUANTFAC	lame/quantize-pvt.c	908;"	d	file:
QUANTFAC	lame/quantize-pvt.c	913;"	d	file:
QUANTFAC	lame/quantize-pvt.c	925;"	d	file:
Q_MAX	lame/quantize-pvt.h	23;"	d
R	wave.cpp	/^  RiffHeader R;$/;"	m	struct:audio	file:
READ_AHEAD	lame/gtkanal.h	6;"	d
REAL_IS_FLOAT	lame/mpglib/mpg123.h	18;"	d
RESERVOIR_H	lame/reservoir.h	36;"	d
RM	lame/Makefile	/^RM = rm -f$/;"	m
ROUNDFAC	lame/quantize-pvt.c	909;"	d	file:
ROUNDFAC	lame/quantize-pvt.c	914;"	d	file:
ROUNDFAC	lame/quantize-pvt.c	926;"	d	file:
RTPheader	lame/mp3rtp.c	/^struct rtpheader RTPheader;$/;"	v	typeref:struct:rtpheader
Read16BitsHighLow	lame/portableio.c	/^Read16BitsHighLow(FILE *fp)$/;"	f
Read16BitsLowHigh	lame/portableio.c	/^Read16BitsLowHigh(FILE *fp)$/;"	f
Read24BitsHighLow	lame/portableio.c	/^Read24BitsHighLow(FILE *fp)$/;"	f
Read32Bits	lame/portableio.c	/^Read32Bits(FILE *fp)$/;"	f
Read32BitsHighLow	lame/portableio.c	/^Read32BitsHighLow(FILE *fp)$/;"	f
Read32BitsLowHigh	lame/portableio.c	150;"	d	file:
Read32BitsLowHigh	lame/portableio.h	97;"	d
ReadByte	lame/portableio.c	/^ReadByte(FILE *fp)$/;"	f
ReadBytes	lame/portableio.c	/^void ReadBytes(FILE	*fp, char *p, int n)$/;"	f
ReadBytesSwapped	lame/portableio.c	/^void ReadBytesSwapped(FILE *fp, char *p, int n)$/;"	f
ReadIeeeDoubleHighLow	lame/portableio.c	/^ReadIeeeDoubleHighLow(FILE *fp)$/;"	f
ReadIeeeDoubleLowHigh	lame/portableio.c	/^ReadIeeeDoubleLowHigh(FILE *fp)$/;"	f
ReadIeeeExtendedHighLow	lame/portableio.c	/^ReadIeeeExtendedHighLow(FILE *fp)$/;"	f
ReadIeeeExtendedLowHigh	lame/portableio.c	/^ReadIeeeExtendedLowHigh(FILE *fp)$/;"	f
ReadIeeeFloatHighLow	lame/portableio.c	/^ReadIeeeFloatHighLow(FILE *fp)$/;"	f
ReadIeeeFloatLowHigh	lame/portableio.c	/^ReadIeeeFloatLowHigh(FILE *fp)$/;"	f
ReadWave	wave.cpp	/^int ReadWave(char *filename, RiffHeader *R, FormatChunk *F, DataChunk *D) \/\/wav2dat$/;"	f
ResvAdjust	lame/reservoir.c	/^ResvAdjust(lame_global_flags *gfp,gr_info *gi, III_side_info_t *l3_side, int mean_bits )$/;"	f
ResvFrameBegin	lame/reservoir.c	/^ResvFrameBegin(lame_global_flags *gfp,III_side_info_t *l3_side, int mean_bits, int frameLength )$/;"	f
ResvFrameEnd	lame/reservoir.c	/^ResvFrameEnd(lame_global_flags *gfp,III_side_info_t *l3_side, int mean_bits)$/;"	f
ResvMax	lame/reservoir.c	/^static int ResvMax  = 0; \/* in bits *\/$/;"	v	file:
ResvMaxBits	lame/reservoir.c	/^void ResvMaxBits(int mean_bits, int *targ_bits, int *extra_bits, int gr)$/;"	f
ResvSize	lame/reservoir.c	/^static int ResvSize = 0; \/* in bits *\/$/;"	v	file:
RiffHeader	wave.h	/^} RiffHeader;$/;"	t	typeref:struct:__anon26
S	lame/doc/html/switchs.html	/^    <strong>* <kbd>-S<\/kbd><a name="S">&nbsp;&nbsp;&nbsp;&nbsp;silent operation<\/a><\/strong> $/;"	a
SBLIMIT	lame/encoder.h	49;"	d
SBLIMIT	lame/mpglib/mpg123.h	40;"	d
SBMAX_l	lame/encoder.h	59;"	d
SBMAX_s	lame/encoder.h	60;"	d
SBPSY_l	lame/encoder.h	55;"	d
SBPSY_s	lame/encoder.h	56;"	d
SCALE	lame/newmdct.c	32;"	d	file:
SECTION00300000000000000000	lame/doc/html/node5.html	/^<H1><A NAME="SECTION00300000000000000000"> For the impatient<\/A> <\/H1>$/;"	a
SECTION00310000000000000000	lame/doc/html/node6.html	/^<H1><A NAME="SECTION00310000000000000000"> Introduction<\/A> <\/H1>$/;"	a
SECTION00311000000000000000	lame/doc/html/node6.html	/^<H2><A NAME="SECTION00311000000000000000"> The purpose of audio compression<\/A> $/;"	a
SECTION00312000000000000000	lame/doc/html/node6.html	/^<H2><A NAME="SECTION00312000000000000000"> The two parts of audio compression<\/A> $/;"	a
SECTION00313000000000000000	lame/doc/html/node6.html	/^<H2><A NAME="SECTION00313000000000000000"> Compression ratios, bitrate and quality<\/A> $/;"	a
SECTION00320000000000000000	lame/doc/html/node7.html	/^<H1> <A NAME="SECTION00320000000000000000"><\/A><FONT FACE="Helvetica">Some examples<\/FONT><\/H1>$/;"	a
SEXP_MAX	lame/ieeefloat.c	89;"	d	file:
SEXP_OFFSET	lame/ieeefloat.c	90;"	d	file:
SEXP_POSITION	lame/ieeefloat.c	92;"	d	file:
SEXP_SIZE	lame/ieeefloat.c	91;"	d	file:
SHELL	lame/Makefile	/^   SHELL=sh	$/;"	m
SHORT_TYPE	lame/encoder.h	74;"	d
SILength	lame/formatBitstream.c	/^    int SILength;$/;"	m	struct:__anon6	file:
SILength	lame/formatBitstream.h	/^    int SILength;$/;"	m	struct:BF_FrameResults
SNDLIB	lame/Makefile	/^SNDLIB = -DLAMESNDFILE$/;"	m
SParts	lame/ieeefloat.c	/^union SParts {$/;"	u	file:
SQRT2	lame/util.h	52;"	d
SQRT2	lame/util.h	54;"	d
SSLIMIT	lame/mpglib/mpg123.h	41;"	d
START_TYPE	lame/encoder.h	73;"	d
STOP_TYPE	lame/encoder.h	75;"	d
SamplesPerSec	wave.cpp	/^  long SamplesPerSec;$/;"	m	struct:audio	file:
SeekPoint	lame/VbrTag.c	/^int SeekPoint(unsigned char TOC[NUMTOCENTRIES], int file_bytes, float percent)$/;"	f
SignalFPE	lame/ieeefloat.c	/^void SignalFPE(int i, void (*j)())$/;"	f
Single	lame/ieeefloat.h	/^typedef float Single;$/;"	t
SizeOfEmptyFrame	lame/VbrTag.c	/^int SizeOfEmptyFrame[2][2]=$/;"	v
SmpFrqIndex	lame/util.c	/^int SmpFrqIndex(  \/* convert samp frq in Hz to index *\/$/;"	f
SwapBytesInWords	lame/util.c	/^void SwapBytesInWords( short *loc, int words )$/;"	f
TABLES_H_INCLUDED	lame/tables.h	21;"	d
TEXT_BECLOSESTREAM	lame/Dll/BladeMP3EncDLL.h	173;"	d
TEXT_BEDEINITSTREAM	lame/Dll/BladeMP3EncDLL.h	172;"	d
TEXT_BEENCODECHUNK	lame/Dll/BladeMP3EncDLL.h	171;"	d
TEXT_BEINITSTREAM	lame/Dll/BladeMP3EncDLL.h	170;"	d
TEXT_BEVERSION	lame/Dll/BladeMP3EncDLL.h	174;"	d
TIMESTATUS_H_INCLUDED	lame/timestatus.h	2;"	d
TMN	lame/psymodel.c	278;"	d	file:
TOC_FLAG	lame/VbrTag.h	45;"	d
TRI_SIZE	lame/fft.c	39;"	d	file:
TRUE	lame/mpglib/mpg123.h	38;"	d
TRUE	lame/util.h	24;"	d
TS_CLOCKS_PER_SEC	lame/timestatus.c	10;"	d	file:
TS_CLOCKS_PER_SEC	lame/timestatus.c	13;"	d	file:
TS_CLOCKS_PER_SEC	lame/timestatus.c	72;"	d	file:
TS_CLOCKS_PER_SEC	lame/timestatus.c	7;"	d	file:
TS_TIME_DECOMPOSE	lame/timestatus.c	126;"	d	file:
TWOPI	fft/fft3.c	26;"	d	file:
TestFromIeeeDouble	lame/ieeefloat.c	/^TestFromIeeeDouble(char *hex)$/;"	f
TestFromIeeeExtended	lame/ieeefloat.c	/^TestFromIeeeExtended(char *hex)$/;"	f
TestFromIeeeSingle	lame/ieeefloat.c	/^TestFromIeeeSingle(char *hex)$/;"	f
TestToIeeeDouble	lame/ieeefloat.c	/^TestToIeeeDouble(defdouble f)$/;"	f
TestToIeeeExtended	lame/ieeefloat.c	/^TestToIeeeExtended(defdouble f)$/;"	f
TestToIeeeSingle	lame/ieeefloat.c	/^TestToIeeeSingle(defdouble f)$/;"	f
ThisFrameSize	lame/formatBitstream.c	/^static int ThisFrameSize  = 0;$/;"	v	file:
TotalFrameSize	lame/VbrTag.c	/^static int TotalFrameSize=0;$/;"	v	file:
UNAME	lame/Makefile	/^UNAME = $(shell uname)$/;"	m
USE_GNUC_ASM	lame/quantize-pvt.c	891;"	d	file:
USE_MSC_ASM	lame/quantize-pvt.c	894;"	d	file:
UTIL_DOT_H	lame/util.h	2;"	d
UnsignedToFloat	lame/ieeefloat.c	78;"	d	file:
UnsignedToFloat	lame/ieeefloat.c	81;"	d	file:
V	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-V 0...9<\/kbd><a name="V">&nbsp;&nbsp;&nbsp;&nbsp;VBR quality $/;"	a
VBR	lame/lame.h	/^  int VBR;$/;"	m	struct:__anon8
VBRHEADERSIZE	lame/VbrTag.h	76;"	d
VBRTAGDATA	lame/VbrTag.h	/^}   VBRTAGDATA;$/;"	t	typeref:struct:__anon3
VBRTag	lame/VbrTag.c	/^static char	VBRTag[]={"Xing"};$/;"	v	file:
VBR_SCALE_FLAG	lame/VbrTag.h	46;"	d
VBR_compare	lame/quantize.c	/^int VBR_compare($/;"	f
VBR_iteration_loop	lame/quantize.c	/^VBR_iteration_loop (lame_global_flags *gfp,$/;"	f
VBR_iteration_loop_new	lame/vbrquantize.c	/^VBR_iteration_loop_new (lame_global_flags *gfp,$/;"	f
VBR_max_bitrate	lame/lame.h	/^  int VBR_max_bitrate;            \/* max bitrate index *\/$/;"	m	struct:__anon8
VBR_max_bitrate_kbps	lame/lame.h	/^  int VBR_max_bitrate_kbps;$/;"	m	struct:__anon8
VBR_min_bitrate	lame/lame.h	/^  int VBR_min_bitrate;            \/* min bitrate index *\/$/;"	m	struct:__anon8
VBR_min_bitrate_kbps	lame/lame.h	/^  int VBR_min_bitrate_kbps;$/;"	m	struct:__anon8
VBR_q	lame/lame.h	/^  int VBR_q;$/;"	m	struct:__anon8
VOICE_QUALITY	lame/Dll/BladeMP3EncDLL.h	/^	VOICE_QUALITY$/;"	e	enum:__anon10
VRBTAG_H_INCLUDED	lame/VbrTag.h	23;"	d
WAV_ID_DATA	lame/get_audio.c	636;"	d	file:
WAV_ID_FMT	lame/get_audio.c	635;"	d	file:
WAV_ID_RIFF	lame/get_audio.c	633;"	d	file:
WAV_ID_WAVE	lame/get_audio.c	634;"	d	file:
WIN32_LEAN_AND_MEAN	lame/machine.h	73;"	d
WRITE_SAMPLE	lame/mpglib/decode_i386.c	24;"	d	file:
WaveToPCM	wave.cpp	/^unsigned char* WaveToPCM(char* name, long* data_size)$/;"	f
Write16BitsHighLow	lame/portableio.c	/^Write16BitsHighLow(FILE *fp, int i)$/;"	f
Write16BitsLowHigh	lame/portableio.c	/^Write16BitsLowHigh(FILE *fp, int i)$/;"	f
Write32Bits	lame/portableio.c	/^Write32Bits(FILE *fp, int i)$/;"	f
Write32BitsHighLow	lame/portableio.c	/^Write32BitsHighLow(FILE *fp, int i)$/;"	f
Write32BitsLowHigh	lame/portableio.c	/^Write32BitsLowHigh(FILE *fp, int i)$/;"	f
Write8Bits	lame/portableio.c	/^Write8Bits(FILE *fp, int i)$/;"	f
WriteBytes	lame/portableio.c	/^void WriteBytes(FILE *fp, char *p, int n)$/;"	f
WriteBytesSwapped	lame/portableio.c	/^void WriteBytesSwapped(FILE *fp, char *p, int n)$/;"	f
WriteIeeeDoubleHighLow	lame/portableio.c	/^WriteIeeeDoubleHighLow(FILE *fp, defdouble num)$/;"	f
WriteIeeeDoubleLowHigh	lame/portableio.c	/^WriteIeeeDoubleLowHigh(FILE *fp, defdouble num)$/;"	f
WriteIeeeExtendedHighLow	lame/portableio.c	/^WriteIeeeExtendedHighLow(FILE *fp, defdouble num)$/;"	f
WriteIeeeExtendedLowHigh	lame/portableio.c	/^WriteIeeeExtendedLowHigh(FILE *fp, defdouble num)$/;"	f
WriteIeeeFloatHighLow	lame/portableio.c	/^WriteIeeeFloatHighLow(FILE *fp, defdouble num)$/;"	f
WriteIeeeFloatLowHigh	lame/portableio.c	/^WriteIeeeFloatLowHigh(FILE *fp, defdouble num)$/;"	f
WriteMainDataBits	lame/formatBitstream.c	/^WriteMainDataBits( u_int val,$/;"	f	file:
WriteString	lame/portableio.h	98;"	d
WriteWave	wave.cpp	/^int WriteWave(char *name,$/;"	f
WriteWave2	wave.cpp	/^int WriteWave2(char *filename, RiffHeader R, FormatChunk F, DataChunk D)$/;"	f
XRPOW_FTOI	lame/quantize-pvt.c	910;"	d	file:
XRPOW_FTOI	lame/quantize-pvt.c	915;"	d	file:
XRPOW_FTOI	lame/quantize-pvt.c	927;"	d	file:
_DEBUGDLL	lame/Dll/BladeMP3EncDLL.c	35;"	d	file:
_FORMAT_BITSTREAM_H	lame/formatBitstream.h	2;"	d
_USE_MATH_DEFINES	fft/fft3.c	20;"	d	file:
___BLADEDLL_H_INCLUDED___	lame/Dll/BladeMP3EncDLL.h	22;"	d
__declspec	lame/Dll/BladeMP3EncDLL.c	/^__declspec(dllexport) BE_ERR	beCloseStream(HBE_STREAM hbeStream)$/;"	f
__declspec	lame/Dll/BladeMP3EncDLL.c	/^__declspec(dllexport) BE_ERR	beDeinitStream(HBE_STREAM hbeStream, PBYTE pOutput, PDWORD pdwOutput)$/;"	f
__declspec	lame/Dll/BladeMP3EncDLL.c	/^__declspec(dllexport) BE_ERR	beEncodeChunk(HBE_STREAM hbeStream, DWORD nSamples, $/;"	f
__declspec	lame/Dll/BladeMP3EncDLL.c	/^__declspec(dllexport) BE_ERR	beInitStream(PBE_CONFIG pbeConfig, PDWORD dwSamples, PDWORD dwBufferSize, PHBE_STREAM phbeStream)$/;"	f
__declspec	lame/Dll/BladeMP3EncDLL.c	/^__declspec(dllexport) BE_ERR beWriteVBRHeader(LPCSTR lpszFileName)$/;"	f
__declspec	lame/Dll/BladeMP3EncDLL.c	/^__declspec(dllexport) VOID		beVersion(PBE_VERSION pbeVersion)$/;"	f
_main	fft/fft.c	/^int _main(int argc, const char *argv[])$/;"	f
_main	lame/main.c	/^int _main(int argc, char **argv)$/;"	f
a	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-a<\/kbd><a name="a">&nbsp;&nbsp;&nbsp;&nbsp;downmix&#160;<\/a><\/strong> $/;"	a
aa_ca	lame/mpglib/layer3.c	/^static real aa_ca[8],aa_cs[8];$/;"	v	file:
aa_cs	lame/mpglib/layer3.c	/^static real aa_ca[8],aa_cs[8];$/;"	v	file:
aac	lame/Dll/BladeMP3EncDLL.h	/^		} aac;$/;"	m	union:__anon11::__anon12	typeref:struct:__anon11::__anon12::__anon15
abs_and_sign	lame/l3bitstream.c	/^abs_and_sign( int *x )$/;"	f
addbuf	lame/mpglib/interface.c	/^static struct buf *addbuf(struct mpstr *mp,char *buf,int size)$/;"	f	file:
adj43	lame/quantize-pvt.c	/^static FLOAT8 adj43[PRECALC_SIZE];$/;"	v	file:
adj43asm	lame/quantize-pvt.c	/^static FLOAT8 adj43asm[PRECALC_SIZE];$/;"	v	file:
aiff_check2	lame/get_audio.c	/^aiff_check2(const char *file_name, IFF_AIFF *pcm_aiff_data)$/;"	f	file:
al_table	lame/util.h	/^typedef sb_alloc        al_table[SBLIMIT][16]; $/;"	t
album	lame/id3tag.h	/^	char album[31];$/;"	m	struct:__anon9
all	lame/newmdct.c	/^static const int all[] = {0,2,3,5,6,8,9,11,12,14,15,17};$/;"	v	file:
alloc_buffer	lame/util.c	/^void alloc_buffer($/;"	f
alloc_ptr	lame/util.h	/^} sb_alloc, *alloc_ptr;$/;"	t	typeref:struct:__anon5
allow_diff_short	lame/lame.h	/^  int allow_diff_short;       \/* allow blocktypes to differ between channels ? *\/$/;"	m	struct:__anon8
amp_scalefac_bands	lame/quantize.c	/^void amp_scalefac_bands(FLOAT8 xrpow[576], $/;"	f
analyze	lame/gtkanal.c	/^static void analyze(void)$/;"	f	file:
approxbits	lame/gtkanal.c	/^  int approxbits;         \/* (approx) bits per frame *\/$/;"	m	struct:gtkinfostruct	file:
artist	lame/id3tag.h	/^	char artist[31];$/;"	m	struct:__anon9
audio	wave.cpp	/^struct audio {$/;"	s	file:
avebits	lame/gtkanal.c	/^  double avebits;         \/* running average bits per frame *\/$/;"	m	struct:gtkinfostruct	file:
avg_bytes_per_sec	lame/get_audio.c	/^	u_long	avg_bytes_per_sec;	 \/* For buffer estimation *\/$/;"	m	struct:fmt_chunk_data_struct	file:
b	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-b<\/kbd><a name="b">&nbsp;&nbsp;&nbsp;&nbsp;bitrate<\/a><\/strong> $/;"	a
b	lame/rtp.c	/^  struct rtpbits b;$/;"	m	struct:rtpheader	typeref:struct:rtpheader::rtpbits	file:
b	lame/rtp.h	/^  struct rtpbits b;$/;"	m	struct:rtpheader	typeref:struct:rtpheader::rtpbits
bCRC	lame/Dll/BladeMP3EncDLL.h	/^			BOOL			bCRC;			\/\/ Insert CRC (TRUE\/FALSE)$/;"	m	struct:__anon11::__anon12::__anon14
bCRC	lame/Dll/BladeMP3EncDLL.h	/^			BOOL	bCRC;$/;"	m	struct:__anon11::__anon12::__anon13
bCopyright	lame/Dll/BladeMP3EncDLL.h	/^			BOOL			bCopyright;		\/\/ Set Copyright Bit (TRUE\/FALSE)$/;"	m	struct:__anon11::__anon12::__anon14
bCopyright	lame/Dll/BladeMP3EncDLL.h	/^			BOOL	bCopyright;$/;"	m	struct:__anon11::__anon12::__anon13
bEnableVBR	lame/Dll/BladeMP3EncDLL.h	/^			BOOL			bEnableVBR;			\/\/ USE VBR ENCODING (TRUE\/FALSE)$/;"	m	struct:__anon11::__anon12::__anon14
bFirstFrame	lame/Dll/BladeMP3EncDLL.c	/^static BOOL		bFirstFrame=TRUE;$/;"	v	file:
bOriginal	lame/Dll/BladeMP3EncDLL.h	/^			BOOL			bOriginal;		\/\/ Set Original Bit (TRUE\/FALSE)$/;"	m	struct:__anon11::__anon12::__anon14
bOriginal	lame/Dll/BladeMP3EncDLL.h	/^			BOOL	bOriginal;$/;"	m	struct:__anon11::__anon12::__anon13
bPrivate	lame/Dll/BladeMP3EncDLL.h	/^			BOOL			bPrivate;		\/\/ Set Private Bit (TRUE\/FALSE)$/;"	m	struct:__anon11::__anon12::__anon14
bPrivate	lame/Dll/BladeMP3EncDLL.h	/^			BOOL	bPrivate;		$/;"	m	struct:__anon11::__anon12::__anon13
bWriteVBRHeader	lame/Dll/BladeMP3EncDLL.h	/^			BOOL			bWriteVBRHeader;	\/\/ WRITE XING VBR HEADER (TRUE\/FALSE)$/;"	m	struct:__anon11::__anon12::__anon14
bWriteVbrTag	lame/lame.h	/^  int bWriteVbrTag;           \/* add Xing VBR tag?         *\/$/;"	m	struct:__anon8
bandInfo	lame/mpglib/layer3.c	/^struct bandInfoStruct bandInfo[9] = { $/;"	v	typeref:struct:bandInfoStruct
bandInfoStruct	lame/mpglib/layer3.c	/^struct bandInfoStruct {$/;"	s	file:
best_huffman_divide	lame/takehiro.c	/^void best_huffman_divide(int gr, int ch, gr_info *gi, int *ix)$/;"	f
best_scalefac_store	lame/takehiro.c	/^void best_scalefac_store(lame_global_flags *gfp,int gr, int ch,$/;"	f
big_values	lame/gtkanal.h	/^  int big_values[2][2];$/;"	m	struct:__anon7
big_values	lame/l3side.h	/^	unsigned big_values;$/;"	m	struct:__anon21
big_values	lame/mpglib/mpg123.h	/^      unsigned big_values;$/;"	m	struct:gr_info_s
bin_search_StepSize2	lame/quantize-pvt.c	/^bin_search_StepSize2 (lame_global_flags *gfp,int desired_rate, int start, int *ix, $/;"	f
binsearchDirection_t	lame/quantize-pvt.c	/^} binsearchDirection_t;$/;"	t	typeref:enum:__anon17	file:
bit_reverse	fft/fft.c	/^void bit_reverse(int data[], int size)$/;"	f
bit_reversing	fft/fft.c	/^int bit_reversing(int i, int size)$/;"	f
bit_stream_struc	lame/util.h	/^typedef struct  bit_stream_struc {$/;"	s
bitindex	lame/mpglib/common.c	/^int bitindex;$/;"	v
bitrate	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
bitrate_index	lame/lame.h	/^  int bitrate_index;$/;"	m	struct:__anon8
bitrate_index	lame/mpglib/mpg123.h	/^    int bitrate_index;$/;"	m	struct:frame
bitrate_table	lame/util.c	/^int     bitrate_table[2][15] = {$/;"	v
bits	lame/util.h	/^    unsigned int    bits;$/;"	m	struct:__anon5
bits_per_sample	lame/get_audio.c	/^	u_short bits_per_sample;	 \/* for PCM data, anyway... *\/$/;"	m	struct:fmt_chunk_data_struct	file:
blkAlgn	lame/get_audio.h	/^    blockAlign      blkAlgn;$/;"	m	struct:IFF_AIFF_struct
blockAlign	lame/get_audio.h	/^} blockAlign;$/;"	t	typeref:struct:blockAlign_struct
blockAlign_struct	lame/get_audio.h	/^typedef struct  blockAlign_struct {$/;"	s
blockSize	lame/get_audio.h	/^    unsigned long   blockSize;$/;"	m	struct:blockAlign_struct
block_align	lame/get_audio.c	/^	u_short block_align;		 \/* Data block size *\/$/;"	m	struct:fmt_chunk_data_struct	file:
block_type	lame/l3side.h	/^	unsigned block_type;$/;"	m	struct:__anon21
block_type	lame/mpglib/mpg123.h	/^      unsigned block_type;$/;"	m	struct:gr_info_s
blocktype	lame/gtkanal.h	/^  int blocktype[2][2];$/;"	m	struct:__anon7
brate	lame/lame.h	/^  int brate;                      \/* bitrate *\/$/;"	m	struct:__anon8
break_cleanup	lame/amiga_mpega.c	/^static int break_cleanup(void)$/;"	f	file:
brhist_add_count	lame/brhist.c	/^void brhist_add_count(void)$/;"	f
brhist_backcur	lame/brhist.c	/^char brhist_backcur[200];$/;"	v
brhist_bar	lame/brhist.c	/^char brhist_bar[BRHIST_BARMAX+10];$/;"	v
brhist_bps	lame/brhist.c	/^char brhist_bps[15][5];$/;"	v
brhist_count	lame/brhist.c	/^long brhist_count[15];$/;"	v
brhist_disp	lame/brhist.c	/^void brhist_disp(void)$/;"	f
brhist_disp_total	lame/brhist.c	/^void brhist_disp_total(lame_global_flags *gfp)$/;"	f
brhist_init	lame/brhist.c	/^void brhist_init(lame_global_flags *gfp,int br_min, int br_max)$/;"	f
brhist_max	lame/brhist.c	/^long brhist_max;$/;"	v
brhist_spc	lame/brhist.c	/^char brhist_spc[BRHIST_BARMAX+1];$/;"	v
brhist_temp	lame/brhist.c	/^long brhist_temp[15];$/;"	v
brhist_vbrmax	lame/brhist.c	/^int brhist_vbrmax;$/;"	v
brhist_vbrmin	lame/brhist.c	/^int brhist_vbrmin;$/;"	v
bs	lame/l3bitstream.c	/^static Bit_stream_struc *bs = NULL;$/;"	v	file:
bs	lame/lame.c	/^static Bit_stream_struc   bs;$/;"	v	file:
bsize	lame/mpglib/mpglib.h	/^	int bsize;$/;"	m	struct:mpstr
bsnum	lame/mpglib/mpglib.h	/^	int bsnum;$/;"	m	struct:mpstr
bsspace	lame/mpglib/mpglib.h	/^        unsigned char bsspace[2][MAXFRAMESIZE+512]; \/* MAXFRAMESIZE *\/$/;"	m	struct:mpstr
btReserved	lame/Dll/BladeMP3EncDLL.h	/^			BYTE			btReserved[255];	\/\/ FUTURE USE, SET TO 0$/;"	m	struct:__anon11::__anon12::__anon14
buf	lame/mpglib/main.c	/^static char buf[16384];$/;"	v	file:
buf	lame/mpglib/mpglib.h	/^	struct buf *buf;$/;"	m	struct:framebuf	typeref:struct:framebuf::buf
buf	lame/mpglib/mpglib.h	/^struct buf {$/;"	s
buf	lame/util.h	/^    unsigned char *buf;         \/* bit stream buffer *\/$/;"	m	struct:bit_stream_struc
buf_bit_idx	lame/util.h	/^    int         buf_bit_idx;    \/* pointer to top bit of top byte in buffer *\/$/;"	m	struct:bit_stream_struc
buf_byte_idx	lame/util.h	/^    int         buf_byte_idx;   \/* pointer to top byte in buffer *\/$/;"	m	struct:bit_stream_struc
buf_size	lame/util.h	/^    int         buf_size;       \/* size of buffer (in number of bytes) *\/$/;"	m	struct:bit_stream_struc
byDLLMajorVersion	lame/Dll/BladeMP3EncDLL.h	/^	BYTE	byDLLMajorVersion;$/;"	m	struct:__anon16
byDLLMinorVersion	lame/Dll/BladeMP3EncDLL.h	/^	BYTE	byDLLMinorVersion;$/;"	m	struct:__anon16
byDay	lame/Dll/BladeMP3EncDLL.h	/^	BYTE	byDay;$/;"	m	struct:__anon16
byEncodingMethod	lame/Dll/BladeMP3EncDLL.h	/^			BYTE	byEncodingMethod;$/;"	m	struct:__anon11::__anon12::__anon15
byMajorVersion	lame/Dll/BladeMP3EncDLL.h	/^	BYTE	byMajorVersion;$/;"	m	struct:__anon16
byMinorVersion	lame/Dll/BladeMP3EncDLL.h	/^	BYTE	byMinorVersion;$/;"	m	struct:__anon16
byMode	lame/Dll/BladeMP3EncDLL.h	/^			BYTE	byMode;			\/\/ BE_MP3_MODE_STEREO, BE_MP3_MODE_DUALCHANNEL, BE_MP3_MODE_MONO$/;"	m	struct:__anon11::__anon12::__anon13
byMode	lame/Dll/BladeMP3EncDLL.h	/^			BYTE	byMode;$/;"	m	struct:__anon11::__anon12::__anon15
byMonth	lame/Dll/BladeMP3EncDLL.h	/^	BYTE	byMonth;$/;"	m	struct:__anon16
byte_order	lame/util.h	/^enum byte_order { order_unknown, order_bigEndian, order_littleEndian };$/;"	g
bytes	lame/VbrTag.h	/^  int		bytes;			\/* total bit stream bytes from Vbr header data*\/$/;"	m	struct:__anon3
c	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-c<\/kbd><a name="c">&nbsp;&nbsp;&nbsp;&nbsp;copyright<\/a><\/strong> $/;"	a
c_sources	lame/Makefile	/^c_sources = \\$/;"	m
ca	lame/newmdct.c	/^static FLOAT8 ca[8], cs[8];$/;"	v	file:
calc_noise1	lame/quantize.c	/^int calc_noise1( FLOAT8 xr[576], int ix[576], gr_info *cod_info,$/;"	f
calc_sfb_ave_noise	lame/vbrquantize.c	/^FLOAT8 calc_sfb_ave_noise(FLOAT8 *xr, FLOAT8 *xr34, int stride, int bw, FLOAT8 sfpow)$/;"	f
calc_xmin	lame/quantize-pvt.c	/^int calc_xmin( lame_global_flags *gfp,FLOAT8 xr[576], III_psy_ratio *ratio,$/;"	f
cb_esc_buf	lame/takehiro.c	/^static int cb_esc_buf[288];$/;"	v	file:
cb_esc_end	lame/takehiro.c	/^static int *cb_esc_end;$/;"	v	file:
cb_esc_sign	lame/takehiro.c	/^static int cb_esc_sign;$/;"	v	file:
cc	lame/rtp.c	/^  int cc:4;	\/* number of CSRC identifiers: 0 *\/$/;"	m	struct:rtpbits	file:
cc	lame/rtp.h	/^  int cc:4;	\/* number of CSRC identifiers: 0 *\/$/;"	m	struct:rtpbits
ch	lame/l3side.h	/^			} ch[2];$/;"	m	struct:__anon22::__anon23	typeref:struct:__anon22::__anon23::gr_info_ss
ch	lame/mpglib/mpg123.h	/^  } ch[2];$/;"	m	struct:III_sideinfo	typeref:struct:III_sideinfo::__anon4
ch01	lame/fft.c	150;"	d	file:
ch2	lame/fft.c	151;"	d	file:
ch3	lame/fft.c	152;"	d	file:
channelSI	lame/formatBitstream.h	/^    BF_BitstreamPart *channelSI[MAX_CHANNELS];$/;"	m	struct:BF_FrameData
channelSIPH	lame/formatBitstream.c	/^    BF_PartHolder *channelSIPH[MAX_CHANNELS];$/;"	m	struct:__anon6	file:
channelSIPH	lame/l3bitstream.c	/^BF_PartHolder *channelSIPH[ MAX_CHANNELS ];$/;"	v
channel_option	lame/gtkanal.c	/^static void channel_option (GtkWidget *widget, gpointer data)$/;"	f	file:
channels	lame/get_audio.c	/^	u_short channels;			 \/* Number of channels *\/$/;"	m	struct:fmt_chunk_data_struct	file:
chap-intro	lame/doc/html/node6.html	/^<A NAME="chap-intro">&#160;<\/A> There is a lot of confusion surrounding the terms $/;"	a
checkrange	lame/mpglib/mpg123.h	/^	int checkrange;$/;"	m	struct:parameter
chflag	lame/gtkanal.c	/^  int chflag;             \/* toggle between L & R channels *\/$/;"	m	struct:gtkinfostruct	file:
choose_table	lame/takehiro.c	/^static int choose_table(int *ix, int *end, int *s)$/;"	f	file:
choose_table_short	lame/takehiro.c	/^static int choose_table_short(int *ix, int *end, int * s)$/;"	f	file:
chunkID	wave.h	/^  ID chunkID; \/\/ RIFF, 식별자$/;"	m	struct:__anon26
chunkID	wave.h	/^  ID chunkID; \/\/ASCII코드로 "data" (0x64617461 big-endian form). $/;"	m	struct:__anon29
chunkID	wave.h	/^  ID chunkID; \/\/ASCII코드로 "fmt" (0x666d7420 big-endian form). $/;"	m	struct:__anon28
chunkID	wave.h	/^  ID chunkID;$/;"	m	struct:__anon25
chunkSize	wave.h	/^  long chunkSize; \/\/ 현재부터 파일 끝까지의 바이트 수$/;"	m	struct:__anon26
chunkSize	wave.h	/^  long chunkSize; \/\/데이터 청크에 포함된 데이터의 크기$/;"	m	struct:__anon29
chunkSize	wave.h	/^  long chunkSize; \/\/포맷 청크의 크기 (byte), wFormat 이 1일때 (PCM 일때)는 16$/;"	m	struct:__anon28
chunkSize	wave.h	/^  long chunkSize;$/;"	m	struct:__anon25
cmdl-examples	lame/doc/html/node7.html	/^<A NAME="cmdl-examples"><\/A> $/;"	a
codedData	lame/formatBitstream.h	/^    BF_BitstreamPart *codedData[MAX_GRANULES][MAX_CHANNELS];$/;"	m	struct:BF_FrameData
codedDataPH	lame/l3bitstream.c	/^BF_PartHolder *codedDataPH[ MAX_GRANULES ][ MAX_CHANNELS ];$/;"	v
comment	lame/id3tag.h	/^	char comment[31];$/;"	m	struct:__anon9
compute_ath	lame/quantize-pvt.c	/^void compute_ath(lame_global_flags *gfp,FLOAT8 ATH_l[SBPSY_l],FLOAT8 ATH_s[SBPSY_l])$/;"	f
compute_scalefacs_long	lame/vbrquantize.c	/^FLOAT8 compute_scalefacs_long(FLOAT8 vbrsf[SBPSY_l],gr_info *cod_info,int scalefac[SBPSY_l])$/;"	f
compute_scalefacs_short	lame/vbrquantize.c	/^FLOAT8 compute_scalefacs_short(FLOAT8 vbrsf[SBPSY_s][3],gr_info *cod_info,int scalefac[SBPSY_s][3])$/;"	f
configure_event	lame/gpkplotting.c	/^configure_event (GtkWidget *widget, GdkEventConfigure *event, gpointer data)$/;"	f	file:
convert_mdct	lame/quantize-pvt.c	/^int convert_mdct, reduce_sidechannel;$/;"	v
copy_audio	wave.cpp	/^struct audio *copy_audio(struct audio *ap)$/;"	f
copy_buffer	lame/util.c	/^int copy_buffer(char *buffer,int size,Bit_stream_struc *bs)$/;"	f
copyright	lame/lame.h	/^  int copyright;                  \/* mark as copyright. default=0 *\/$/;"	m	struct:__anon8
copyright	lame/mpglib/mpg123.h	/^    int copyright;$/;"	m	struct:frame
cos16	lame/mpglib/tabinit.c	/^static real cos64[16],cos32[8],cos16[4],cos8[2],cos4[1];$/;"	v	file:
cos32	lame/mpglib/tabinit.c	/^static real cos64[16],cos32[8],cos16[4],cos8[2],cos4[1];$/;"	v	file:
cos4	lame/mpglib/tabinit.c	/^static real cos64[16],cos32[8],cos16[4],cos8[2],cos4[1];$/;"	v	file:
cos64	lame/mpglib/tabinit.c	/^static real cos64[16],cos32[8],cos16[4],cos8[2],cos4[1];$/;"	v	file:
cos8	lame/mpglib/tabinit.c	/^static real cos64[16],cos32[8],cos16[4],cos8[2],cos4[1];$/;"	v	file:
cos_l	lame/newmdct.c	/^static FLOAT8 cos_l[(NL \/ 2) * 12 + (NL \/ 6) * 4 + (NL \/ 18) * 2];$/;"	v	file:
cos_s	lame/newmdct.c	/^static FLOAT8 cos_s[NS \/ 2][NS \/ 2];$/;"	v	file:
costab	lame/fft.c	/^static FLOAT costab[TRI_SIZE*2];$/;"	v	file:
count1	lame/l3side.h	/^	unsigned count1;$/;"	m	struct:__anon21
count1bits	lame/l3side.h	/^	unsigned count1bits;$/;"	m	struct:__anon21
count1table_select	lame/l3side.h	/^	unsigned count1table_select;$/;"	m	struct:__anon21
count1table_select	lame/mpglib/mpg123.h	/^      unsigned count1table_select;$/;"	m	struct:gr_info_s
count_bit_ESC	lame/takehiro.c	/^count_bit_ESC(int *ix, int *end, int t1, int t2, int *s)$/;"	f	file:
count_bit_noESC	lame/takehiro.c	/^count_bit_noESC(int *ix, int *end, unsigned int table) $/;"	f	file:
count_bit_noESC2	lame/takehiro.c	/^count_bit_noESC2(unsigned int table) $/;"	f	file:
count_bit_short_ESC	lame/takehiro.c	/^count_bit_short_ESC(int *ix, int *end, int t1, int t2, int *s)$/;"	f	file:
count_bit_short_noESC	lame/takehiro.c	/^count_bit_short_noESC(int *ix, int *end, unsigned int table) $/;"	f	file:
count_bits	lame/takehiro.c	/^int count_bits(lame_global_flags *gfp,int *ix, FLOAT8 *xr, gr_info *cod_info)  $/;"	f
count_bits_long	lame/takehiro.c	/^static int count_bits_long(int ix[576], gr_info *gi)$/;"	f	file:
count_samples_carefully	lame/get_audio.c	/^static int count_samples_carefully;$/;"	v	file:
crc	lame/gtkanal.h	/^  int crc,padding;$/;"	m	struct:__anon7
crc	lame/l3bitstream.c	/^static unsigned int crc = 0; \/* (jo) current crc *\/$/;"	v	file:
cs	lame/newmdct.c	/^static FLOAT8 ca[8], cs[8];$/;"	v	file:
cwlimit	lame/lame.h	/^  float cwlimit;                  \/* predictability limit *\/$/;"	m	struct:__anon8
d	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-d<\/kbd><a name="d">&nbsp;&nbsp;&nbsp;&nbsp;block type control<\/a><\/strong> $/;"	a
d	lame/ieeefloat.c	/^	Double d;$/;"	m	union:DParts	file:
dct12	lame/mpglib/layer3.c	/^static void dct12(real *in,real *rawout1,real *rawout2,register real *wi,register real *ts)$/;"	f	file:
dct36	lame/mpglib/layer3.c	/^static void dct36(real *inbuf,real *o1,real *o2,real *wintab,real *tsbuf)$/;"	f	file:
dct64	lame/mpglib/dct64_i386.c	/^void dct64(real *a,real *b,real *c)$/;"	f
dct64_1	lame/mpglib/dct64_i386.c	/^static void dct64_1(real *out0,real *out1,real *b1,real *b2,real *samples)$/;"	f	file:
decodeMP3	lame/mpglib/interface.c	/^int decodeMP3(struct mpstr *mp,char *in,int isize,char *out,$/;"	f
decode_header	lame/mpglib/common.c	/^int decode_header(struct frame *fr,unsigned long newhead)$/;"	f
decwin	lame/mpglib/tabinit.c	/^real decwin[512+32];$/;"	v
defdouble	lame/ieeefloat.h	/^ typedef double defdouble;$/;"	t
defdouble	lame/ieeefloat.h	/^ typedef long double defdouble;$/;"	t
delete_event	lame/gtkanal.c	/^static void delete_event( GtkWidget *widget,$/;"	f	file:
desalloc_buffer	lame/util.c	/^void desalloc_buffer(Bit_stream_struc *bs)   \/* bit stream structure *\/$/;"	f
disable_reservoir	lame/lame.h	/^  int disable_reservoir;          \/* use bit reservoir? *\/$/;"	m	struct:__anon8
disp_brhist	lame/brhist.c	/^int disp_brhist = 1;$/;"	v
display_bitrates	lame/util.c	/^void display_bitrates(FILE *out_fh)$/;"	f
do_layer3	lame/mpglib/layer3.c	/^int do_layer3(struct frame *fr,unsigned char *pcm_sample,int *pcm_point)$/;"	f
drain_into_ancillary_data	lame/l3bitstream.c	/^drain_into_ancillary_data( int lengthInBits )$/;"	f	file:
dump_config	lame/Dll/BladeMP3EncDLL.c	/^void dump_config( char *inPath, char *outPath)$/;"	f
dwAvgBytesPerSec	wave.h	/^  unsigned long dwAvgBytesPerSec; \/\/전송률 (stereo의 경우, 2*dwSamplesPerSec)$/;"	m	struct:__anon27
dwBitrate	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwBitrate;		\/\/ CBR bitrate, VBR min bitrate$/;"	m	struct:__anon11::__anon12::__anon14
dwConfig	lame/Dll/BladeMP3EncDLL.h	/^	DWORD	dwConfig;			\/\/ BE_CONFIG_XXXXX$/;"	m	struct:__anon11
dwEmphasis	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwEmphasis;		\/\/ FUTURE USE, SET TO 0$/;"	m	struct:__anon11::__anon12::__anon14
dwMaxBitrate	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwMaxBitrate;	\/\/ CBR ignored, VBR Max bitrate$/;"	m	struct:__anon11::__anon12::__anon14
dwMpegVersion	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwMpegVersion;	\/\/ MPEG-1 OR MPEG-2$/;"	m	struct:__anon11::__anon12::__anon14
dwPsyModel	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwPsyModel;		\/\/ FUTURE USE, SET TO 0$/;"	m	struct:__anon11::__anon12::__anon14
dwReSampleRate	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwReSampleRate;	\/\/ DOWNSAMPLERATE, 0=ENCODER DECIDES  $/;"	m	struct:__anon11::__anon12::__anon14
dwSampleBufferSize	lame/Dll/BladeMP3EncDLL.c	/^static DWORD	dwSampleBufferSize=0;$/;"	v	file:
dwSampleRate	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwSampleRate;	\/\/ ALLOWED SAMPLERATE VALUES DEPENDS ON dwMPEGVersion $/;"	m	struct:__anon11::__anon12::__anon14
dwSampleRate	lame/Dll/BladeMP3EncDLL.h	/^			DWORD	dwSampleRate;	\/\/ 48000, 44100 and 32000 allowed$/;"	m	struct:__anon11::__anon12::__anon13
dwSampleRate	lame/Dll/BladeMP3EncDLL.h	/^			DWORD	dwSampleRate;$/;"	m	struct:__anon11::__anon12::__anon15
dwSamplesPerSec	wave.h	/^  unsigned long dwSamplesPerSec; \/\/샘플링 레이트$/;"	m	struct:__anon27
dwStructSize	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwStructSize;$/;"	m	struct:__anon11::__anon12::__anon14
dwStructVersion	lame/Dll/BladeMP3EncDLL.h	/^			DWORD			dwStructVersion;	$/;"	m	struct:__anon11::__anon12::__anon14
e	lame/doc/html/switchs.html	/^    <strong>* <kbd>-e n\/5\/c<\/kbd><a name="e">&nbsp;&nbsp;&nbsp;&nbsp;de-emphasis<\/a><\/strong> $/;"	a
e	lame/ieeefloat.c	/^	defdouble e;$/;"	m	union:EParts	file:
element	lame/formatBitstream.h	/^    BF_BitstreamElement *element;$/;"	m	struct:__anon2
elements	lame/formatBitstream.c	/^static int elements, forwardFrameLength, forwardSILength; $/;"	v	file:
emph	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
emphasis	lame/lame.h	/^  int emphasis;                   \/* obsolete *\/$/;"	m	struct:__anon8
emphasis	lame/mpglib/mpg123.h	/^    int emphasis;$/;"	m	struct:frame
empty_buffer	lame/util.c	/^void empty_buffer(Bit_stream_struc *bs)$/;"	f
en	lame/gtkanal.h	/^  double en[2][4][SBMAX_l];$/;"	m	struct:__anon7
en	lame/l3side.h	/^    III_psy_xmin en;$/;"	m	struct:__anon20
en_s	lame/gtkanal.h	/^  double en_s[2][4][3*SBMAX_s];$/;"	m	struct:__anon7
encodeMainData	lame/l3bitstream.c	/^encodeMainData( lame_global_flags *gfp,$/;"	f	file:
encodeSideInfo	lame/l3bitstream.c	/^static int encodeSideInfo( lame_global_flags *gfp,III_side_info_t  *si )$/;"	f	file:
encoder_delay	lame/lame.h	/^  int encoder_delay;$/;"	m	struct:__anon8
enerbox	lame/gtkanal.c	/^GtkWidget *enerbox[2];   \/* spectrum, gr=0,1 plotted here *\/$/;"	v
energy	lame/gtkanal.h	/^  double energy[2][4][BLKSIZE];$/;"	m	struct:__anon7
enwindow	lame/newmdct.c	/^static FLOAT8 enwindow[] = $/;"	v	file:
error_protection	lame/lame.h	/^  int error_protection;           \/* use 2 bytes per frame for a CRC checksum. default=0*\/$/;"	m	struct:__anon8
error_protection	lame/mpglib/mpg123.h	/^    int error_protection;$/;"	m	struct:frame
ers	lame/gtkanal.h	/^  double ers[2][4];$/;"	m	struct:__anon7
estimated	lame/timestatus.c	/^  FLOAT estimated;$/;"	m	struct:ts_times	file:
eta	lame/timestatus.c	/^  FLOAT eta;$/;"	m	struct:ts_times	file:
exit_cleanup	lame/amiga_mpega.c	/^static void exit_cleanup(void)$/;"	f	file:
experimentalX	lame/lame.h	/^  int experimentalX;            $/;"	m	struct:__anon8
experimentalY	lame/lame.h	/^  int experimentalY;$/;"	m	struct:__anon8
experimentalZ	lame/lame.h	/^  int experimentalZ;$/;"	m	struct:__anon8
expose_event	lame/gpkplotting.c	/^expose_event (GtkWidget *widget, GdkEventExpose *event, gpointer data)$/;"	f	file:
extension	lame/lame.h	/^  int extension;                  \/* the MP3 'private extension' bit.  meaningless *\/$/;"	m	struct:__anon8
extension	lame/mpglib/mpg123.h	/^    int extension;$/;"	m	struct:frame
f	lame/doc/html/switchs.html	/^    <strong>* <kbd>-f<\/kbd><a name="f">&nbsp;&nbsp;&nbsp;&nbsp;fast mode<\/a><\/strong> $/;"	a
fft_long	lame/fft.c	/^void fft_long($/;"	f
fft_short	lame/fft.c	/^void fft_short($/;"	f
fht	lame/fft.c	/^static INLINE void fht(FLOAT *fz, short n)$/;"	f	file:
field	wave.h	/^  subFormatChunk field;$/;"	m	struct:__anon28
filetype	lame/gtkanal.c	/^  int filetype;           \/* input file type 0=WAV, 1=MP3 *\/$/;"	m	struct:gtkinfostruct	file:
fill_buffer	lame/lame.c	/^int fill_buffer(lame_global_flags *gfp,short int *outbuf,int desired_len,short int *inbuf,int len) {$/;"	f
fill_buffer_resample	lame/lame.c	/^int fill_buffer_resample(lame_global_flags *gfp,short int *outbuf,int desired_len,$/;"	f
filter_type	lame/lame.h	/^  int filter_type;          \/* 0=polyphase filter, 1= FIR filter 2=MDCT filter(bad)*\/$/;"	m	struct:__anon8
find_scalefac	lame/vbrquantize.c	/^FLOAT8 find_scalefac(FLOAT8 *xr,FLOAT8 *xr34,int stride,int sfb,$/;"	f
findpixmap	lame/gpkplotting.c	/^static GdkPixmap **findpixmap(GtkWidget *widget)$/;"	f	file:
flag123	lame/gtkanal.c	/^  int flag123;            \/* show mpg123 frame info, OR ISO encoder frame info *\/$/;"	m	struct:gtkinfostruct	file:
flags	lame/VbrTag.h	/^  int		flags;			\/* from Vbr header data *\/$/;"	m	struct:__anon3
fmt_chunk_data	lame/get_audio.c	/^} fmt_chunk_data;$/;"	t	typeref:struct:fmt_chunk_data_struct	file:
fmt_chunk_data_struct	lame/get_audio.c	/^typedef struct fmt_chunk_data_struct {$/;"	s	file:
force_ms	lame/lame.h	/^  int force_ms;                   \/* force M\/S mode.  requires mode=1 *\/$/;"	m	struct:__anon8
format	lame/Dll/BladeMP3EncDLL.h	/^	} format;$/;"	m	struct:__anon11	typeref:union:__anon11::__anon12
format_tag	lame/get_audio.c	/^	short	format_tag;			 \/* Format category *\/$/;"	m	struct:fmt_chunk_data_struct	file:
forwardFrameLength	lame/formatBitstream.c	/^static int elements, forwardFrameLength, forwardSILength; $/;"	v	file:
forwardSILength	lame/formatBitstream.c	/^static int elements, forwardFrameLength, forwardSILength; $/;"	v	file:
fr	lame/mpglib/mpglib.h	/^	struct frame fr;$/;"	m	struct:mpstr	typeref:struct:mpstr::frame
frame	lame/mpglib/mpg123.h	/^struct frame {$/;"	s
frameData	lame/l3bitstream.c	/^BF_FrameData    *frameData    = NULL;$/;"	v
frameLength	lame/formatBitstream.c	/^    int frameLength;$/;"	m	struct:__anon6	file:
frameLength	lame/formatBitstream.h	/^    int              frameLength;$/;"	m	struct:BF_FrameData
frameNum	lame/gtkanal.h	/^  int frameNum;           \/* current frame number *\/$/;"	m	struct:__anon7
frameNum	lame/lame.h	/^  long int frameNum;              \/* frame counter *\/$/;"	m	struct:__anon8
frameNum123	lame/gtkanal.h	/^  int frameNum123;$/;"	m	struct:__anon7
frameResults	lame/l3bitstream.c	/^BF_FrameResults *frameResults = NULL;$/;"	v
frameSI	lame/formatBitstream.h	/^    BF_BitstreamPart *frameSI;$/;"	m	struct:BF_FrameData
frameSIPH	lame/formatBitstream.c	/^    BF_PartHolder *frameSIPH;$/;"	m	struct:__anon6	file:
frameSIPH	lame/l3bitstream.c	/^BF_PartHolder *frameSIPH;$/;"	v
frameadv	lame/gtkanal.c	/^static void frameadv( GtkWidget *widget, gpointer   data )$/;"	f	file:
frameadv1	lame/gtkanal.c	/^static int frameadv1(GtkWidget *widget, gpointer   data )$/;"	f	file:
framebuf	lame/mpglib/mpglib.h	/^struct framebuf {$/;"	s
framecounter	lame/gtkanal.c	/^static GtkWidget *framecounter;  \/* progress counter *\/ $/;"	v	file:
frameprogress	lame/gtkanal.c	/^static GtkWidget *frameprogress; \/* progress bar *\/ $/;"	v	file:
frames	lame/VbrTag.h	/^  int		frames;			\/* total bit stream frames from Vbr header data *\/$/;"	m	struct:__anon3
framesize	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
framesize	lame/lame.h	/^  int framesize;                  $/;"	m	struct:__anon8
framesize	lame/mpglib/mpg123.h	/^    int framesize; \/* computed framesize *\/$/;"	m	struct:frame
framesize	lame/mpglib/mpglib.h	/^	int framesize;$/;"	m	struct:mpstr
frametime	lame/gtkanal.h	/^  double frametime;       \/* starting time of frame, in seconds *\/$/;"	m	struct:__anon7
free_side_info_link	lame/formatBitstream.c	/^free_side_info_link( side_info_link *l )$/;"	f	file:
free_side_queues	lame/formatBitstream.c	/^free_side_queues(void)$/;"	f	file:
freqs	lame/mpglib/common.c	/^long freqs[9] = { 44100, 48000, 32000,$/;"	v
fsizeold	lame/mpglib/mpglib.h	/^        int fsizeold;$/;"	m	struct:mpstr
fskip	lame/get_audio.c	/^int fskip(FILE *sf,long num_bytes,int dummy)$/;"	f
full_gain	lame/mpglib/mpg123.h	/^      real *full_gain[3];$/;"	m	struct:gr_info_s
g_Position	lame/VbrTag.c	/^static long g_Position[NUMTOCENTRIES];$/;"	v	file:
gainpow2	lame/mpglib/layer3.c	/^static real gainpow2[256+118+4];$/;"	v	file:
genre	lame/id3tag.h	/^	char genre[1];$/;"	m	struct:__anon9
genre_last	lame/id3tag.c	/^int genre_last=147;$/;"	v
genre_list	lame/id3tag.c	/^char *genre_list[]={$/;"	v
get1bit	lame/mpglib/layer3.c	/^static unsigned int get1bit(void)$/;"	f	file:
get_audio	lame/get_audio.c	/^int get_audio(lame_global_flags *gfp,short buffer[2][1152],int stereo)$/;"	f
get_bin	wave.cpp	/^int *get_bin(struct audio *ap)$/;"	f
get_lame_version	lame/version.c	/^char* get_lame_version(void)$/;"	f
get_main_menu	lame/gtkanal.c	/^static void get_main_menu(GtkWidget *window, GtkWidget ** menubar) {$/;"	f	file:
get_mp3x_version	lame/version.c	/^char* get_mp3x_version(void)$/;"	f
get_psy_version	lame/version.c	/^char* get_psy_version(void)$/;"	f
get_side_info	lame/formatBitstream.c	/^get_side_info(void)$/;"	f	file:
get_waveformDataSize	wave.cpp	/^long get_waveformDataSize(struct audio *ap)$/;"	f
getbits	lame/mpglib/common.c	/^unsigned int getbits(int number_of_bits)$/;"	f
getbits_fast	lame/mpglib/common.c	/^unsigned int getbits_fast(int number_of_bits)$/;"	f
getframebits	lame/util.c	/^void getframebits(lame_global_flags *gfp,int *bitsPerFrame, int *mean_bits) {$/;"	f
gf	lame/Dll/BladeMP3EncDLL.c	/^lame_global_flags gf;$/;"	v
gfp	lame/gtkanal.c	/^static lame_global_flags *gfp;$/;"	v	file:
global_gain	lame/l3side.h	/^ 	unsigned global_gain;$/;"	m	struct:__anon21
gmp	lame/mpglib/interface.c	/^struct mpstr *gmp;$/;"	v	typeref:struct:mpstr
gpk_bargraph_draw	lame/gpkplotting.c	/^void gpk_bargraph_draw(GtkWidget *widget,           \/* plot on this widged *\/$/;"	f
gpk_graph_draw	lame/gpkplotting.c	/^void gpk_graph_draw(GtkWidget *widget,               \/* plot on this widged *\/$/;"	f
gpk_plot_new	lame/gpkplotting.c	/^GtkWidget *gpk_plot_new(int width, int height)$/;"	f
gpk_rectangle_draw	lame/gpkplotting.c	/^void gpk_rectangle_draw(GtkWidget *widget,              \/* plot on this widged *\/$/;"	f
gpk_redraw	lame/gpkplotting.c	/^void gpk_redraw(GdkPixmap *pixmap, GtkWidget *pixmapbox)$/;"	f
gr	lame/l3side.h	/^		} gr[2];$/;"	m	struct:__anon22	typeref:struct:__anon22::__anon23
gr	lame/mpglib/mpg123.h	/^    struct gr_info_s gr[2];$/;"	m	struct:III_sideinfo::__anon4	typeref:struct:III_sideinfo::__anon4::gr_info_s
gr_info	lame/l3side.h	/^} gr_info;$/;"	t	typeref:struct:__anon21
gr_info_s	lame/mpglib/mpg123.h	/^struct gr_info_s {$/;"	s
gr_info_ss	lame/l3side.h	/^		struct gr_info_ss {$/;"	s	struct:__anon22::__anon23
group	lame/util.h	/^    unsigned int    group;$/;"	m	struct:__anon5
gs_pSndFileIn	lame/get_audio.c	/^static SNDFILE*	gs_pSndFileIn=NULL;$/;"	v	file:
gs_wfInfo	lame/get_audio.c	/^static SF_INFO	gs_wfInfo;$/;"	v	file:
gtkcontrol	lame/gtkanal.c	/^int gtkcontrol(lame_global_flags *gfp2)$/;"	f
gtkflag	lame/gtkanal.c	/^int gtkflag;$/;"	v
gtkflag	lame/lame.h	/^  int gtkflag;                \/* run frame analyzer?       *\/$/;"	m	struct:__anon8
gtkinfo	lame/gtkanal.c	/^} gtkinfo;$/;"	v	typeref:struct:gtkinfostruct
gtkinfostruct	lame/gtkanal.c	/^struct gtkinfostruct {$/;"	s	file:
gtkmakeframe	lame/gtkanal.c	/^int gtkmakeframe(void)$/;"	f
h	lame/doc/html/switchs.html	/^    <strong>* <kbd>-h<\/kbd><a name="h">&nbsp;&nbsp;&nbsp;&nbsp;high quality<\/a><\/strong> $/;"	a
h_id	lame/VbrTag.h	/^  int		h_id;			\/* from MPEG header, 0=MPEG2, 1=MPEG1 *\/$/;"	m	struct:__anon3
head	lame/mpglib/mpglib.h	/^	struct buf *head,*tail;$/;"	m	struct:mpstr	typeref:struct:mpstr::buf
header	lame/formatBitstream.h	/^    BF_BitstreamPart *header;$/;"	m	struct:BF_FrameData
header	lame/mpglib/mpglib.h	/^	unsigned long header;$/;"	m	struct:mpstr
headerPH	lame/formatBitstream.c	/^    BF_PartHolder *headerPH;$/;"	m	struct:__anon6	file:
headerPH	lame/l3bitstream.c	/^BF_PartHolder *headerPH;$/;"	v
header_change	lame/mpglib/mpg123.h	/^    int header_change;$/;"	m	struct:frame
headerbox	lame/gtkanal.c	/^GtkWidget *headerbox;    \/* mpg123 header info shown here *\/$/;"	v
highpass1	lame/lame.h	/^  float highpass1,highpass2;      \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon8
highpass2	lame/lame.h	/^  float highpass1,highpass2;      \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon8
highpass_band	lame/lame.h	/^  int highpass_band;         \/* zero bands <= highpass_band *\/$/;"	m	struct:__anon8
highpassfreq	lame/lame.h	/^  int highpassfreq;               \/* freq in Hz. 0=lame choses. -1=no filter *\/$/;"	m	struct:__anon8
highpasswidth	lame/lame.h	/^  int highpasswidth;              \/* freq width of filter, in Hz (default=15%)*\/$/;"	m	struct:__anon8
hlen	lame/tables.h	/^  unsigned char *hlen;	\/*pointer to array[xlen][ylen]		*\/$/;"	m	struct:huffcodetab
hs	lame/tables.c	/^unsigned int hs = sizeof(HUFFBITS)*8;$/;"	v
ht	lame/mpglib/huffman.h	/^static struct newhuff ht[] = $/;"	v	typeref:struct:newhuff
ht	lame/tables.c	/^struct huffcodetab ht[HTN] =$/;"	v	typeref:struct:huffcodetab
htc	lame/mpglib/huffman.h	/^static struct newhuff htc[] = $/;"	v	typeref:struct:newhuff
huf_tbl_noESC	lame/takehiro.c	/^static const int huf_tbl_noESC[15] = {$/;"	v	file:
huffcodetab	lame/tables.h	/^struct huffcodetab {$/;"	s
hybrid_blc	lame/mpglib/mpglib.h	/^	int hybrid_blc[2];$/;"	m	struct:mpstr
hybrid_block	lame/mpglib/mpglib.h	/^	real hybrid_block[2][2][SBLIMIT*SSLIMIT];$/;"	m	struct:mpstr
i	lame/ieeefloat.c	/^	long i;$/;"	m	union:SParts	file:
i	lame/ieeefloat.c	/^	long i[2];$/;"	m	union:DParts	file:
i	lame/ieeefloat.c	/^	short i[6];$/;"	m	union:EParts	file:
iAudioHeader	lame/rtp.c	/^  int iAudioHeader;	\/* =0?! *\/$/;"	m	struct:rtpheader	file:
iAudioHeader	lame/rtp.h	/^  int iAudioHeader;	\/* =0?! *\/$/;"	m	struct:rtpheader
i_slen2	lame/mpglib/layer3.c	/^static unsigned int i_slen2[256]; \/* MPEG 2.0 slen for intensity stereo *\/$/;"	v	file:
i_stereo	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
id3_buildtag	lame/id3tag.c	/^void id3_buildtag(ID3TAGDATA *tag) {$/;"	f
id3_inittag	lame/id3tag.c	/^void id3_inittag(ID3TAGDATA *tag) {$/;"	f
id3_pad	lame/id3tag.c	/^static void id3_pad(char *string, int length) {$/;"	f	file:
id3_writetag	lame/id3tag.c	/^int id3_writetag(char* filename, ID3TAGDATA *tag) {$/;"	f
id3tag	lame/id3tag.c	/^ID3TAGDATA id3tag;$/;"	v
idle_back	lame/gtkanal.c	/^static gint idle_back = 0;     \/* set when we are displaying the old data *\/$/;"	v	file:
idle_count	lame/gtkanal.c	/^static gint idle_count;       \/* pause & plot when idle_count=idel_count_max *\/$/;"	v	file:
idle_count_max	lame/gtkanal.c	/^static gint idle_count_max;   \/* number of frames to process before plotting *\/$/;"	v	file:
idle_end	lame/gtkanal.c	/^static gint idle_end=0;      \/* process all frames, stop at last frame  *\/$/;"	v	file:
idle_keepgoing	lame/gtkanal.c	/^static gint idle_keepgoing;        \/* processing of frames is ON *\/$/;"	v	file:
imag	fft/fft.c	/^	double imag;$/;"	m	struct:twinddle_factor	file:
imag	fft/main.c	/^	double imag;$/;"	m	struct:twinddle_factor	file:
inPath	lame/lame.h	/^  char *inPath;               \/* name of input file *\/$/;"	m	struct:__anon8
inPath	lame/parse.c	/^  char    inPath[MAX_NAME_SIZE];$/;"	v
in_samplerate	lame/lame.h	/^  int in_samplerate;          \/* input_samp_rate. default=44.1kHz     *\/$/;"	m	struct:__anon8
init_bit_stream_w	lame/util.c	/^void init_bit_stream_w(Bit_stream_struc* bs)$/;"	f
init_fft	lame/fft.c	/^void init_fft(void)$/;"	f
init_layer3	lame/mpglib/layer3.c	/^void init_layer3(int down_sample_sblimit)$/;"	f
init_outer_loop	lame/quantize.c	/^int init_outer_loop(lame_global_flags *gfp,$/;"	f
initrtp	lame/rtp.c	/^void initrtp(struct rtpheader *foo) {$/;"	f
inner_loop	lame/quantize-pvt.c	/^inner_loop( lame_global_flags *gfp,FLOAT8 xrpow[576],$/;"	f
input_bitrate	lame/get_audio.c	/^static int input_bitrate;$/;"	v	file:
input_format	lame/lame.h	/^  sound_file_format input_format;   $/;"	m	struct:__anon8
interpolation	wave.cpp	/^void interpolation(unsigned char *input, long size, unsigned char *output)$/;"	f
intwinbase	lame/mpglib/tabinit.c	/^static long intwinbase[] = {$/;"	v	file:
ipow20	lame/quantize-pvt.c	/^FLOAT8 ipow20[Q_MAX];$/;"	v
is_syncword	lame/mpglib/main.c	/^int is_syncword(char *header)$/;"	f
ispow	lame/mpglib/layer3.c	/^static real ispow[8207];$/;"	v	file:
iteration_init	lame/quantize-pvt.c	/^iteration_init( lame_global_flags *gfp,III_side_info_t *l3_side, int l3_enc[2][2][576])$/;"	f
iteration_loop	lame/quantize.c	/^iteration_loop( lame_global_flags *gfp,$/;"	f
ix_max	lame/takehiro.c	/^ static int ix_max(int *ix, int *end)$/;"	f	file:
js	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
jsbound	lame/mpglib/mpg123.h	/^    int jsbound;$/;"	m	struct:frame
k	lame/doc/html/switchs.html	/^    <strong>* <kbd>-k<\/kbd><a name="k">&nbsp;&nbsp;&nbsp;&nbsp;full bandwidth<\/a><\/strong> $/;"	a
kDoubleLength	lame/ieeefloat.h	75;"	d
kExtendedLength	lame/ieeefloat.h	76;"	d
kFloatLength	lame/ieeefloat.h	74;"	d
kbflag	lame/gtkanal.c	/^  int kbflag;             \/* toggle between wave # and barks *\/$/;"	m	struct:gtkinfostruct	file:
key_press_event	lame/gtkanal.c	/^static gint key_press_event (GtkWidget *widget, GdkEventKey *event)$/;"	f	file:
l	lame/l3side.h	/^	FLOAT8	l[SBPSY_l + 1];$/;"	m	struct:__anon19
l	lame/l3side.h	/^	int l[SBMAX_l];            \/* [cb] *\/$/;"	m	struct:__anon24
l	lame/quantize-pvt.h	/^   int l[1+SBMAX_l];$/;"	m	struct:scalefac_struct
l3_side	lame/lame.c	/^static III_side_info_t l3_side;$/;"	v	file:
lame_close_infile	lame/get_audio.c	/^void lame_close_infile(lame_global_flags *gfp)$/;"	f
lame_decode	lame/mpglib/main.c	/^int lame_decode(char *buf,int len,short pcm_l[],short pcm_r[])$/;"	f
lame_decode_fromfile	lame/amiga_mpega.c	/^int lame_decode_fromfile(FILE *fd, short pcm_l[],short pcm_r[])$/;"	f
lame_decode_fromfile	lame/mpglib/main.c	/^int lame_decode_fromfile(FILE *fd, short pcm_l[], short pcm_r[])$/;"	f
lame_decode_init	lame/mpglib/main.c	/^int lame_decode_init(void)$/;"	f
lame_decode_initfile	lame/amiga_mpega.c	/^int lame_decode_initfile(const char *fullname, int *stereo, int *samp, int *bitrate, unsigned long *nsamp)$/;"	f
lame_decode_initfile	lame/mpglib/main.c	/^int lame_decode_initfile(FILE *fd, int *stereo, int *samp, int *bitrate, $/;"	f
lame_encode	lame/lame.c	/^int lame_encode(lame_global_flags *gfp, short int in_buffer[2][1152],char *mp3buf,int size){$/;"	f
lame_encode_buffer	lame/lame.c	/^int lame_encode_buffer(lame_global_flags *gfp,$/;"	f
lame_encode_buffer_interleaved	lame/lame.c	/^int lame_encode_buffer_interleaved(lame_global_flags *gfp,$/;"	f
lame_encode_finish	lame/lame.c	/^int lame_encode_finish(lame_global_flags *gfp,char *mp3buffer, int mp3buffer_size)$/;"	f
lame_encode_frame	lame/lame.c	/^int lame_encode_frame(lame_global_flags *gfp,$/;"	f
lame_global_flags	lame/lame.h	/^} lame_global_flags;$/;"	t	typeref:struct:__anon8
lame_help	lame/parse.c	/^void lame_help(lame_global_flags *gfp,char *name)  \/* print syntax & exit *\/$/;"	f
lame_init	lame/lame.c	/^void lame_init(lame_global_flags *gfp)$/;"	f
lame_init_infile	lame/get_audio.c	/^void lame_init_infile(lame_global_flags *gfp)$/;"	f
lame_init_params	lame/lame.c	/^void lame_init_params(lame_global_flags *gfp)$/;"	f
lame_mp3_tags	lame/lame.c	/^void lame_mp3_tags(lame_global_flags *gfp)$/;"	f
lame_parse_args	lame/parse.c	/^void lame_parse_args(lame_global_flags *gfp,int argc, char **argv)$/;"	f
lame_presets_info	lame/parse.c	/^void lame_presets_info(lame_global_flags *gfp,char *name)  \/* print syntax & exit *\/$/;"	f
lame_print_config	lame/lame.c	/^void lame_print_config(lame_global_flags *gfp)$/;"	f
lame_print_version	lame/version.c	/^void lame_print_version(FILE *ofile) {$/;"	f
lame_readframe	lame/get_audio.c	/^int lame_readframe(lame_global_flags *gfp,short int Buffer[2][1152])$/;"	f
lame_usage	lame/parse.c	/^void lame_usage(lame_global_flags *gfp,char *name)  \/* print syntax & exit *\/$/;"	f
lame_version	lame/lame.c	/^void lame_version(lame_global_flags *gfp,char *ostring) {$/;"	f
lay	lame/mpglib/mpg123.h	/^    int lay;$/;"	m	struct:frame
length	lame/formatBitstream.h	/^    u_short length;$/;"	m	struct:__anon1
linbits	lame/mpglib/huffman.h	/^  unsigned int linbits;$/;"	m	struct:newhuff
linmax	lame/tables.h	/^  unsigned int linmax;	\/*max number to be stored in linbits	*\/$/;"	m	struct:huffcodetab
longDiff	lame/mpglib/layer3.c	/^  short longDiff[22];$/;"	m	struct:bandInfoStruct	file:
longIdx	lame/mpglib/layer3.c	/^  short longIdx[23];$/;"	m	struct:bandInfoStruct	file:
longLimit	lame/mpglib/layer3.c	/^int longLimit[9][23];$/;"	v
loop_break	lame/quantize-pvt.c	/^int loop_break( III_scalefac_t *scalefac, gr_info *cod_info)$/;"	f
lowpass1	lame/lame.h	/^  float lowpass1,lowpass2;        \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon8
lowpass2	lame/lame.h	/^  float lowpass1,lowpass2;        \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon8
lowpass_band	lame/lame.h	/^  int lowpass_band;          \/* zero bands >= lowpass_band in the polyphase filterbank *\/$/;"	m	struct:__anon8
lowpassfreq	lame/lame.h	/^  int lowpassfreq;                \/* freq in Hz. 0=lame choses. -1=no filter *\/$/;"	m	struct:__anon8
lowpasswidth	lame/lame.h	/^  int lowpasswidth;               \/* freq width of filter, in Hz (default=15%)*\/$/;"	m	struct:__anon8
lpszVersion	lame/version.c	/^static char lpszVersion[80];$/;"	v	file:
lsf	lame/mpglib/mpg123.h	/^    int lsf;$/;"	m	struct:frame
m	lame/doc/html/switchs.html	/^    <strong>* <kbd>-m s\/<b>j\/<\/b>f\/m<\/kbd><a name="m">&nbsp;&nbsp;&nbsp;&nbsp;stereo $/;"	a
m	lame/rtp.c	/^  int m:1;	\/* marker: 0 *\/$/;"	m	struct:rtpbits	file:
m	lame/rtp.h	/^  int m:1;	\/* marker: 0 *\/$/;"	m	struct:rtpbits
main	fft/fft3.c	/^int main(int argc, char *argv[])$/;"	f
main	fft/main.c	/^int main(int argc, const char *argv[])$/;"	f
main	lame/ieeefloat.c	/^main(void)$/;"	f
main	lame/mp3rtp.c	/^int main(int argc, char **argv)$/;"	f
main	lame/mp3x.c	/^int main(int argc, char **argv)$/;"	f
main	main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
mainDataLength	lame/formatBitstream.h	/^    int mainDataLength;$/;"	m	struct:BF_FrameResults
main_data	lame/formatBitstream.c	/^main_data( BF_FrameData *fi, BF_FrameResults *results )$/;"	f	file:
main_data_begin	lame/l3side.h	/^	int main_data_begin; \/* unsigned -> int *\/$/;"	m	struct:__anon22
main_data_begin	lame/mpglib/mpg123.h	/^  unsigned main_data_begin;$/;"	m	struct:III_sideinfo
mainbits	lame/gtkanal.h	/^  int mainbits[2][2];$/;"	m	struct:__anon7
maindata	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
make_decode_tables	lame/mpglib/tabinit.c	/^void make_decode_tables(long scaleval)$/;"	f
makesocket	lame/rtp.c	/^int makesocket(char *szAddr,unsigned short port,int TTL,struct sockaddr_in *sSockAddr) {$/;"	f
map	lame/mpglib/layer3.c	/^static int *map[9][3];$/;"	v	file:
mapbuf0	lame/mpglib/layer3.c	/^static int mapbuf0[9][152];$/;"	v	file:
mapbuf1	lame/mpglib/layer3.c	/^static int mapbuf1[9][156];$/;"	v	file:
mapbuf2	lame/mpglib/layer3.c	/^static int mapbuf2[9][44];$/;"	v	file:
mapend	lame/mpglib/layer3.c	/^static int *mapend[9][3];$/;"	v	file:
masking_lower	lame/quantize-pvt.c	/^FLOAT masking_lower=1;$/;"	v
max_elements	lame/formatBitstream.h	/^    int              max_elements;$/;"	m	struct:BF_PartHolder
max_noise	lame/gtkanal.h	/^  double max_noise[2][2];$/;"	m	struct:__anon7
max_plotwindows	lame/gpkplotting.c	/^static gint max_plotwindows = 10;$/;"	v	file:
max_range_sfac_tab	lame/quantize-pvt.c	/^static unsigned max_range_sfac_tab[6][4] =$/;"	v	file:
maxb	lame/mpglib/mpg123.h	/^      unsigned maxb;$/;"	m	struct:gr_info_s
maxband	lame/mpglib/mpg123.h	/^      unsigned maxband[3];$/;"	m	struct:gr_info_s
maxbandl	lame/mpglib/mpg123.h	/^      unsigned maxbandl;$/;"	m	struct:gr_info_s
maxbits	lame/gtkanal.c	/^  int maxbits;            \/* max bits per frame used so far*\/$/;"	m	struct:gtkinfostruct	file:
maximum	lame/quantize.h	63;"	d
mctrl	lame/amiga_mpega.c	/^MPEGA_CTRL      mctrl;$/;"	v
mdct_init48	lame/newmdct.c	/^void mdct_init48(void)$/;"	f
mdct_long	lame/newmdct.c	/^static void mdct_long(FLOAT8 *out, FLOAT8 *in)$/;"	f	file:
mdct_short	lame/newmdct.c	/^static void mdct_short(FLOAT8 *out, FLOAT8 *in)$/;"	f	file:
mdct_sub48	lame/newmdct.c	/^void mdct_sub48(lame_global_flags *gfp,$/;"	f
mdctbox	lame/gtkanal.c	/^GtkWidget *mdctbox[2];   \/* mdct coefficients gr=0,1 plotted here *\/$/;"	v
mean_bits	lame/gtkanal.h	/^  int scfsi[2],mean_bits,resvsize;$/;"	m	struct:__anon7
mem_alloc	lame/util.c	/^void  *mem_alloc(unsigned long block, char *item)$/;"	f
menu_items	lame/gtkanal.c	/^static GtkItemFactoryEntry menu_items[] = {$/;"	v	file:
mf_samples_to_encode	lame/lame.c	/^static int mf_samples_to_encode;$/;"	v	file:
mf_size	lame/lame.c	/^static int mf_size;$/;"	v	file:
mfbuf	lame/lame.c	/^static short int mfbuf[2][MFSIZE];$/;"	v	file:
minimum	lame/quantize.h	64;"	d
mixed	lame/gtkanal.h	/^  int mixed[2][2];$/;"	m	struct:__anon7
mixed_block_flag	lame/l3side.h	/^	unsigned mixed_block_flag;$/;"	m	struct:__anon21
mixed_block_flag	lame/mpglib/mpg123.h	/^      unsigned mixed_block_flag;$/;"	m	struct:gr_info_s
ml00	lame/fft.c	154;"	d	file:
ml01	lame/fft.c	159;"	d	file:
ml10	lame/fft.c	155;"	d	file:
ml11	lame/fft.c	160;"	d	file:
ml20	lame/fft.c	156;"	d	file:
ml21	lame/fft.c	161;"	d	file:
ml30	lame/fft.c	157;"	d	file:
ml31	lame/fft.c	162;"	d	file:
mm	lame/newmdct.c	/^static FLOAT8 mm[16][SBLIMIT - 1];$/;"	v	file:
mode	lame/lame.h	/^  int mode;                       \/* 0,1,2,3 stereo,jstereo,dual channel,mono *\/$/;"	m	struct:__anon8
mode	lame/mpglib/mpg123.h	/^    int mode;$/;"	m	struct:frame
mode_ext	lame/lame.h	/^  int mode_ext;$/;"	m	struct:__anon8
mode_ext	lame/mpglib/mpg123.h	/^    int mode_ext;$/;"	m	struct:frame
mode_fixed	lame/lame.h	/^  int mode_fixed;                 \/* use specified the mode, do not use lame's opinion of the best mode *\/$/;"	m	struct:__anon8
mode_gr	lame/lame.h	/^  int mode_gr;                    \/* granules per frame *\/$/;"	m	struct:__anon8
mp	lame/mpglib/main.c	/^struct mpstr mp;$/;"	v	typeref:struct:mpstr
mp3	lame/Dll/BladeMP3EncDLL.h	/^			} mp3;					\/\/ BE_CONFIG_MP3$/;"	m	union:__anon11::__anon12	typeref:struct:__anon11::__anon12::__anon13
mp3_decode	main.cpp	/^char *mp3_decode(char *path) $/;"	f
mp3buffer	lame/mp3rtp.c	/^char mp3buffer[LAME_MAXMP3BUFFER];$/;"	v
mp3done	lame/gtkanal.c	/^static int mp3done = 0;         \/* last frame has been read *\/$/;"	v	file:
mpeg25	lame/mpglib/mpg123.h	/^    int mpeg25;$/;"	m	struct:frame
mpg123blocktype	lame/gtkanal.h	/^  int mpg123blocktype[2][2];$/;"	m	struct:__anon7
mpg123xr	lame/gtkanal.h	/^  double mpg123xr[2][2][576];$/;"	m	struct:__anon7
mpstr	lame/mpglib/mpglib.h	/^struct mpstr {$/;"	s
ms00	lame/fft.c	164;"	d	file:
ms01	lame/fft.c	169;"	d	file:
ms10	lame/fft.c	165;"	d	file:
ms11	lame/fft.c	170;"	d	file:
ms20	lame/fft.c	166;"	d	file:
ms21	lame/fft.c	171;"	d	file:
ms30	lame/fft.c	167;"	d	file:
ms31	lame/fft.c	172;"	d	file:
ms_convert	lame/quantize-pvt.c	/^void ms_convert(FLOAT8 xr[2][576],FLOAT8 xr_org[2][576])$/;"	f
ms_ener_ratio	lame/gtkanal.h	/^  double ms_ener_ratio[2];$/;"	m	struct:__anon7
ms_ratio	lame/gtkanal.h	/^  double ms_ratio[2];$/;"	m	struct:__anon7
ms_stereo	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
msflag	lame/gtkanal.c	/^  int msflag;             \/* toggle between L&R vs M&S PCM data display *\/$/;"	m	struct:gtkinfostruct	file:
mstream	lame/amiga_mpega.c	/^MPEGA_STREAM    *mstream=NULL;$/;"	v
musicin	lame/get_audio.c	/^static FILE *musicin=NULL;  \/* input file pointer *\/$/;"	v	file:
nChannels	lame/formatBitstream.c	/^    int nChannels;$/;"	m	struct:__anon6	file:
nChannels	lame/formatBitstream.h	/^    int              nChannels;$/;"	m	struct:BF_FrameData
nGranules	lame/formatBitstream.c	/^    int nGranules;$/;"	m	struct:__anon6	file:
nGranules	lame/formatBitstream.h	/^    int              nGranules;$/;"	m	struct:BF_FrameData
nMode	lame/Dll/BladeMP3EncDLL.h	/^			INT				nMode;			\/\/ BE_MP3_MODE_STEREO, BE_MP3_MODE_DUALCHANNEL, BE_MP3_MODE_MONO$/;"	m	struct:__anon11::__anon12::__anon14
nOutBufPos	lame/util.h	/^    int 			nOutBufPos;  \/* for .DLL code *\/$/;"	m	struct:bit_stream_struc
nPsychoModel	lame/Dll/BladeMP3EncDLL.c	/^static int		nPsychoModel=2;$/;"	v	file:
nQuality	lame/Dll/BladeMP3EncDLL.h	/^			MPEG_QUALITY	nQuality;		\/\/ Quality setting (NORMAL,HIGH,LOW,VOICE)$/;"	m	struct:__anon11::__anon12::__anon14
nVBRQuality	lame/Dll/BladeMP3EncDLL.h	/^			INT				nVBRQuality;		\/\/ VBR QUALITY 0..9$/;"	m	struct:__anon11::__anon12::__anon14
nVbrFrameBufferSize	lame/VbrTag.c	/^int nVbrFrameBufferSize=0;$/;"	v
nVbrNumFrames	lame/VbrTag.c	/^int nVbrNumFrames=0;$/;"	v
nZeroStreamSize	lame/VbrTag.c	/^static int nZeroStreamSize=0;$/;"	v	file:
n_slen2	lame/mpglib/layer3.c	/^static unsigned int n_slen2[512]; \/* MPEG 2.0 slen for 'normal' mode *\/$/;"	v	file:
newhuff	lame/mpglib/huffman.h	/^struct newhuff $/;"	s
next	lame/formatBitstream.c	/^    struct side_info_link *next;$/;"	m	struct:side_info_link	typeref:struct:side_info_link::side_info_link	file:
next	lame/mpglib/mpglib.h	/^	struct frame *next;$/;"	m	struct:framebuf	typeref:struct:framebuf::frame
next	lame/mpglib/mpglib.h	/^        struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
nextBackPtr	lame/formatBitstream.h	/^    int nextBackPtr;$/;"	m	struct:BF_FrameResults
noATH	lame/lame.h	/^  int noATH;                      \/* disable ATH *\/$/;"	m	struct:__anon8
no_short_blocks	lame/lame.h	/^  int no_short_blocks;        \/* disable short blocks       *\/$/;"	m	struct:__anon8
noise_shaping	lame/lame.h	/^  int noise_shaping;        \/* 0 = none $/;"	m	struct:__anon8
noise_shaping_stop	lame/lame.h	/^  int noise_shaping_stop;   \/* 0 = stop at over=0, all scalefacs amplified or$/;"	m	struct:__anon8
nrEntries	lame/formatBitstream.h	/^    u_int              nrEntries;$/;"	m	struct:__anon2
nr_of_sfb_block	lame/quantize-pvt.c	/^unsigned nr_of_sfb_block[6][3][4] =$/;"	v
numChannels	lame/get_audio.h	/^    short           numChannels;$/;"	m	struct:IFF_AIFF_struct
numSampleFrames	lame/get_audio.h	/^    unsigned long   numSampleFrames;$/;"	m	struct:IFF_AIFF_struct
num_channels	lame/get_audio.c	/^static int num_channels;$/;"	v	file:
num_channels	lame/lame.h	/^  int num_channels;           \/* input number of channels. default=2  *\/$/;"	m	struct:__anon8
num_plotwindows	lame/gpkplotting.c	/^static gint num_plotwindows = 0;$/;"	v	file:
num_samples	lame/get_audio.c	/^static unsigned long num_samples;$/;"	v	file:
num_samples	lame/gtkanal.h	/^  int num_samples;        \/* number of pcm samples read for this frame *\/$/;"	m	struct:__anon7
num_samples	lame/lame.h	/^  unsigned long num_samples;  \/* number of samples. default=2^32-1    *\/$/;"	m	struct:__anon8
o	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-o<\/kbd><a name="o">&nbsp;&nbsp;&nbsp;&nbsp;non-original<\/a><\/strong> $/;"	a
offset	lame/get_audio.h	/^    unsigned long   offset;$/;"	m	struct:blockAlign_struct
on_pe	lame/quantize-pvt.c	/^void on_pe(lame_global_flags *gfp,FLOAT8 pe[2][2],III_side_info_t *l3_side,$/;"	f
order_bigEndian	lame/util.h	/^enum byte_order { order_unknown, order_bigEndian, order_littleEndian };$/;"	e	enum:byte_order
order_littleEndian	lame/util.h	/^enum byte_order { order_unknown, order_bigEndian, order_littleEndian };$/;"	e	enum:byte_order
order_unknown	lame/util.h	/^enum byte_order { order_unknown, order_bigEndian, order_littleEndian };$/;"	e	enum:byte_order
original	lame/lame.h	/^  int original;                   \/* mark as original. default=1 *\/$/;"	m	struct:__anon8
original	lame/mpglib/mpg123.h	/^    int original;$/;"	m	struct:frame
out	lame/mpglib/main.c	/^static char out[FSIZE];$/;"	v	file:
outPath	lame/lame.h	/^  char *outPath;              \/* name of output file. *\/$/;"	m	struct:__anon8
outPath	lame/parse.c	/^  char    outPath[MAX_NAME_SIZE];$/;"	v
out_samplerate	lame/lame.h	/^  int out_samplerate;         \/* output_samp_rate. (usually determined automatically)   *\/ $/;"	m	struct:__anon8
outer_loop	lame/quantize.c	/^void outer_loop($/;"	f
over	lame/gtkanal.h	/^  int over[2][2];$/;"	m	struct:__anon7
over_noise	lame/gtkanal.h	/^  double over_noise[2][2];$/;"	m	struct:__anon7
p	lame/doc/html/switchs.html	/^    <strong>* <kbd>-p<\/kbd><a name="p">&nbsp;&nbsp;&nbsp;&nbsp;error protection<\/a><\/strong><\/dt>$/;"	a
p	lame/rtp.c	/^  int p:1;	\/* is there padding appended: 0 *\/$/;"	m	struct:rtpbits	file:
p	lame/rtp.h	/^  int p:1;	\/* is there padding appended: 0 *\/$/;"	m	struct:rtpbits
pVbrFrames	lame/VbrTag.c	/^int* pVbrFrames=NULL;$/;"	v
padding	lame/gtkanal.h	/^  int crc,padding;$/;"	m	struct:__anon7
padding	lame/lame.h	/^  int padding;                    \/* padding for the current frame? *\/$/;"	m	struct:__anon8
padding	lame/mpglib/mpg123.h	/^    int padding;$/;"	m	struct:frame
padding_type	lame/lame.h	/^  int padding_type;               \/* 0=no padding, 1=always pad, 2=adjust padding *\/$/;"	m	struct:__anon8
param	lame/mpglib/common.c	/^struct parameter param = { 1 , 1 , 0 , 0 };$/;"	v	typeref:struct:parameter
parameter	lame/mpglib/mpg123.h	/^struct parameter {$/;"	s
parse_aiff_header	lame/get_audio.c	/^parse_aiff_header(FILE *sf)$/;"	f	file:
parse_file_header	lame/get_audio.c	/^void parse_file_header(lame_global_flags *gfp,FILE *sf)$/;"	f
parse_wave_header	lame/get_audio.c	/^parse_wave_header(FILE *sf)$/;"	f	file:
part	lame/formatBitstream.h	/^    BF_BitstreamPart *part;$/;"	m	struct:BF_PartHolder
part2_3_length	lame/l3side.h	/^	unsigned part2_3_length;$/;"	m	struct:__anon21
part2_3_length	lame/mpglib/mpg123.h	/^      unsigned part2_3_length;$/;"	m	struct:gr_info_s
part2_length	lame/l3side.h	/^	unsigned part2_length;$/;"	m	struct:__anon21
path	wave.cpp	/^  char *path;$/;"	m	struct:audio	file:
pbtOutBuf	lame/util.h	/^    unsigned char*		pbtOutBuf;   \/* for .DLL code *\/$/;"	m	struct:bit_stream_struc
pbtStreamBuffer	lame/VbrTag.c	/^static u_char pbtStreamBuffer[216];   $/;"	v	file:
pcm_point	lame/mpglib/common.c	/^int pcm_point = 0;$/;"	v
pcm_sample	lame/mpglib/common.c	/^unsigned char *pcm_sample;$/;"	v
pcmbox	lame/gtkanal.c	/^GtkWidget *pcmbox;       \/* PCM data plotted here *\/$/;"	v
pcmdata	lame/gtkanal.h	/^  double pcmdata[2][1600];$/;"	m	struct:__anon7
pcmdata2	lame/gtkanal.h	/^  double pcmdata2[2][1152+1152-DECDELAY];$/;"	m	struct:__anon7
pe	lame/gtkanal.h	/^  double pe[2][4];$/;"	m	struct:__anon7
pinfo	lame/gtkanal.c	/^plotting_data *pinfo,*pplot;$/;"	v
pixmapboxes	lame/gpkplotting.c	/^static GtkWidget *pixmapboxes[10];$/;"	v	file:
pixmaps	lame/gpkplotting.c	/^static GdkPixmap *pixmaps[10];$/;"	v	file:
plot_frame	lame/gtkanal.c	/^void plot_frame(void)$/;"	f
plotclick	lame/gtkanal.c	/^static void plotclick( GtkWidget *widget, gpointer   data )$/;"	f	file:
plotting_data	lame/gtkanal.h	/^} plotting_data;$/;"	t	typeref:struct:__anon7
pnt	lame/mpglib/mpglib.h	/^        unsigned char *pnt;$/;"	m	struct:buf
pnts	lame/mpglib/tabinit.c	/^real *pnts[] = { cos64,cos32,cos16,cos8,cos4 };$/;"	v
pos	lame/mpglib/mpglib.h	/^	long pos;$/;"	m	struct:buf
pos	lame/mpglib/mpglib.h	/^	long pos;$/;"	m	struct:framebuf
pow1_1	lame/mpglib/layer3.c	/^static real pow1_1[2][16],pow2_1[2][16],pow1_2[2][16],pow2_2[2][16];$/;"	v	file:
pow1_2	lame/mpglib/layer3.c	/^static real pow1_1[2][16],pow2_1[2][16],pow1_2[2][16],pow2_2[2][16];$/;"	v	file:
pow20	lame/quantize-pvt.c	/^FLOAT8 pow20[Q_MAX];$/;"	v
pow2_1	lame/mpglib/layer3.c	/^static real pow1_1[2][16],pow2_1[2][16],pow1_2[2][16],pow2_2[2][16];$/;"	v	file:
pow2_2	lame/mpglib/layer3.c	/^static real pow1_1[2][16],pow2_1[2][16],pow1_2[2][16],pow2_2[2][16];$/;"	v	file:
pow2gain	lame/mpglib/mpg123.h	/^      real *pow2gain;$/;"	m	struct:gr_info_s
pow43	lame/quantize-pvt.c	/^FLOAT8 pow43[PRECALC_SIZE];$/;"	v
pplot	lame/gtkanal.c	/^plotting_data *pinfo,*pplot;$/;"	v
preflag	lame/l3side.h	/^	unsigned preflag;$/;"	m	struct:__anon21
preflag	lame/mpglib/mpg123.h	/^      unsigned preflag;$/;"	m	struct:gr_info_s
pretab	lame/quantize-pvt.c	/^int  pretab[21] =$/;"	v
pretab1	lame/mpglib/layer3.c	/^static int pretab1[22] = {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,3,3,2,0};$/;"	v	file:
pretab2	lame/mpglib/layer3.c	/^static int pretab2[22] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	v	file:
prev	lame/mpglib/mpglib.h	/^	struct frame *prev;$/;"	m	struct:framebuf	typeref:struct:framebuf::frame
prev	lame/mpglib/mpglib.h	/^        struct buf *prev;$/;"	m	struct:buf	typeref:struct:buf::buf
print_audio_info	wave.cpp	/^int print_audio_info(struct audio *ap)$/;"	f
print_header	lame/mpglib/common.c	/^void print_header(struct frame *fr)$/;"	f
print_header_compact	lame/mpglib/common.c	/^void print_header_compact(struct frame *fr)$/;"	f
private_bits	lame/l3side.h	/^	unsigned private_bits;$/;"	m	struct:__anon22
private_bits	lame/mpglib/mpg123.h	/^  unsigned private_bits;$/;"	m	struct:III_sideinfo
psy_data	lame/tables.c	/^FLOAT8 psy_data[] =$/;"	v
psymodel	lame/lame.h	/^  int psymodel;             \/* 0 = none   1=gpsycho *\/$/;"	m	struct:__anon8
pt	lame/rtp.c	/^  int pt:7;	\/* payload type: 14 for MPEG audio *\/$/;"	m	struct:rtpbits	file:
pt	lame/rtp.h	/^  int pt:7;	\/* payload type: 14 for MPEG audio *\/$/;"	m	struct:rtpbits
pt	lame/util.h	/^    FILE        *pt;            \/* pointer to bit stream device *\/$/;"	m	struct:bit_stream_struc
pupdate	lame/gtkanal.c	/^  int pupdate;            \/* plot while processing, or only when needed *\/$/;"	m	struct:gtkinfostruct	file:
putMyBits	lame/l3bitstream.c	/^void putMyBits( u_int val, u_int len )$/;"	f
putbits	lame/util.c	/^void putbits($/;"	f
putmask	lame/util.c	/^int putmask[9]={0x0, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff};$/;"	v
qss	lame/gtkanal.h	/^  int qss[2][2];$/;"	m	struct:__anon7
quality	lame/lame.h	/^  int quality;                \/* quality setting 0=best,  9=worst  *\/$/;"	m	struct:__anon8
quant	lame/util.h	/^    unsigned int    quant;$/;"	m	struct:__anon5
quant_compare	lame/quantize.c	/^int quant_compare(int experimentalX,$/;"	f
quantization	lame/lame.h	/^  int quantization;         \/* 0 = ISO formual,  1=best amplitude *\/$/;"	m	struct:__anon8
quantize_xrpow	lame/quantize-pvt.c	/^void quantize_xrpow(FLOAT8 xr[576], int ix[576], gr_info *cod_info) {$/;"	f
quantize_xrpow_ISO	lame/quantize-pvt.c	/^void quantize_xrpow_ISO( FLOAT8 xr[576], int ix[576], gr_info *cod_info )$/;"	f
quiet	lame/mpglib/mpg123.h	/^	int quiet;	\/* shut up! *\/$/;"	m	struct:parameter
r	lame/doc/html/switchs.html	/^    <strong>* <kbd>-r<\/kbd><a name="r">&nbsp;&nbsp;&nbsp;&nbsp;input file is raw $/;"	a
random	lame/mpglib/mpg123.h	21;"	d
read	wave.cpp	/^void read()$/;"	f
read_audio	wave.cpp	/^struct audio *read_audio (char *path)$/;"	f
read_buf_byte	lame/mpglib/interface.c	/^static int read_buf_byte(struct mpstr *mp)$/;"	f	file:
read_head	lame/mpglib/interface.c	/^static void read_head(struct mpstr *mp)$/;"	f	file:
read_samples_mp3	lame/get_audio.c	/^int read_samples_mp3(lame_global_flags *gfp,FILE *musicin,short int mpg123pcm[2][1152],int stereo)$/;"	f
read_samples_pcm	lame/get_audio.c	/^int read_samples_pcm(lame_global_flags *gfp,short sample_buffer[2304], int frame_size,int samples_to_read)$/;"	f
read_samples_pcm	lame/get_audio.c	/^int read_samples_pcm(lame_global_flags *gfp,short sample_buffer[2304],int frame_size,int samples_to_read)$/;"	f
real	fft/fft.c	/^	double real;$/;"	m	struct:twinddle_factor	file:
real	fft/main.c	/^	double real;$/;"	m	struct:twinddle_factor	file:
real	lame/mpglib/mpg123.h	27;"	d
real	lame/mpglib/mpg123.h	29;"	d
real	lame/mpglib/mpg123.h	31;"	d
reduce_side	lame/quantize-pvt.c	/^void reduce_side(int targ_bits[2],FLOAT8 ms_ener_ratio,int mean_bits)$/;"	f
reduce_sidechannel	lame/quantize-pvt.c	/^int convert_mdct, reduce_sidechannel;$/;"	v
region0_count	lame/l3side.h	/^	unsigned region0_count;$/;"	m	struct:__anon21
region0_count	lame/takehiro.c	/^    unsigned region0_count;$/;"	m	struct:__anon18	file:
region1_count	lame/l3side.h	/^	unsigned region1_count;$/;"	m	struct:__anon21
region1_count	lame/takehiro.c	/^    unsigned region1_count;$/;"	m	struct:__anon18	file:
region1start	lame/mpglib/mpg123.h	/^      unsigned region1start;$/;"	m	struct:gr_info_s
region2start	lame/mpglib/mpg123.h	/^      unsigned region2start;$/;"	m	struct:gr_info_s
remove_buf	lame/mpglib/interface.c	/^static void remove_buf(struct mpstr *mp)$/;"	f	file:
resample_ratio	lame/lame.h	/^  float resample_ratio;           \/* input_samp_rate\/output_samp_rate *\/$/;"	m	struct:__anon8
resvDrain	lame/l3side.h	/^	int resvDrain;$/;"	m	struct:__anon22
resvsize	lame/gtkanal.h	/^  int scfsi[2],mean_bits,resvsize;$/;"	m	struct:__anon7
rpelev	lame/psymodel.c	286;"	d	file:
rpelev2	lame/psymodel.c	287;"	d	file:
rtp_output	lame/mp3rtp.c	/^void rtp_output(char *mp3buffer,int mp3size)$/;"	f
rtp_usage	lame/mp3rtp.c	/^void rtp_usage(void) {$/;"	f
rtpbits	lame/rtp.c	/^struct rtpbits {$/;"	s	file:
rtpbits	lame/rtp.h	/^struct rtpbits {$/;"	s
rtpheader	lame/rtp.c	/^struct rtpheader {	\/* in network byte order *\/$/;"	s	file:
rtpheader	lame/rtp.h	/^struct rtpheader {      \/* in network byte order *\/$/;"	s
rtpsi	lame/mp3rtp.c	/^struct sockaddr_in rtpsi;$/;"	v	typeref:struct:sockaddr_in
rtpsocket	lame/mp3rtp.c	/^int rtpsocket;$/;"	v
rv_tbl	lame/fft.c	/^static const short rv_tbl[] = {$/;"	v	file:
s	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-s 16\/22.05\/24\/32\/44.1\/48<\/kbd><a name="s">&nbsp;&nbsp;&nbsp;&nbsp;sampling $/;"	a
s	lame/ieeefloat.c	/^	Single s;$/;"	m	union:SParts	file:
s	lame/l3side.h	/^	FLOAT8	s[SBPSY_s + 1][3];$/;"	m	struct:__anon19
s	lame/l3side.h	/^	int s[SBMAX_s][3];         \/* [window][cb] *\/$/;"	m	struct:__anon24
s	lame/quantize-pvt.h	/^   int s[1+SBMAX_s];$/;"	m	struct:scalefac_struct
s_freq_table	lame/util.c	/^FLOAT8  s_freq_table[2][4] = {{22.05, 24, 16, 0}, {44.1, 48, 32, 0}};$/;"	v
samp_freq	lame/get_audio.c	/^static int samp_freq;$/;"	v	file:
sampfreq	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
sampleRate	lame/get_audio.h	/^    FLOAT           sampleRate;$/;"	m	struct:IFF_AIFF_struct
sampleSize	lame/get_audio.h	/^    short           sampleSize;$/;"	m	struct:IFF_AIFF_struct
sampleType	lame/get_audio.h	/^    unsigned long   sampleType;$/;"	m	struct:IFF_AIFF_struct
samplerate_index	lame/lame.h	/^  int samplerate_index;$/;"	m	struct:__anon8
samples_per_sec	lame/get_audio.c	/^	u_long	samples_per_sec;	 \/* Sampling rate *\/$/;"	m	struct:fmt_chunk_data_struct	file:
sampling_frequency	lame/mpglib/mpg123.h	/^    int sampling_frequency;$/;"	m	struct:frame
samprate	lame/VbrTag.h	/^  int		samprate;		\/* determined from MPEG header *\/$/;"	m	struct:__anon3
sb_alloc	lame/util.h	/^} sb_alloc, *alloc_ptr;$/;"	t	typeref:struct:__anon5
sb_sample	lame/newmdct.c	/^static FLOAT8 sb_sample[2][2][18][SBLIMIT];$/;"	v	file:
scaleFactors	lame/formatBitstream.h	/^    BF_BitstreamPart *scaleFactors[MAX_GRANULES][MAX_CHANNELS];$/;"	m	struct:BF_FrameData
scaleFactorsPH	lame/l3bitstream.c	/^BF_PartHolder *scaleFactorsPH[ MAX_GRANULES ][ MAX_CHANNELS ];$/;"	v
scale_bitcount	lame/quantize-pvt.c	/^int scale_bitcount( III_scalefac_t *scalefac, gr_info *cod_info)$/;"	f
scale_bitcount_lsf	lame/quantize-pvt.c	/^int scale_bitcount_lsf(III_scalefac_t *scalefac, gr_info *cod_info)$/;"	f
scalefac_band	lame/quantize-pvt.c	/^struct scalefac_struct scalefac_band;$/;"	v	typeref:struct:scalefac_struct
scalefac_compress	lame/l3side.h	/^	unsigned scalefac_compress;$/;"	m	struct:__anon21
scalefac_compress	lame/mpglib/mpg123.h	/^      unsigned scalefac_compress;$/;"	m	struct:gr_info_s
scalefac_scale	lame/gtkanal.h	/^  int scalefac_scale[2][2];$/;"	m	struct:__anon7
scalefac_scale	lame/l3side.h	/^	unsigned scalefac_scale;$/;"	m	struct:__anon21
scalefac_scale	lame/mpglib/mpg123.h	/^      unsigned scalefac_scale;$/;"	m	struct:gr_info_s
scalefac_struct	lame/quantize-pvt.h	/^struct scalefac_struct$/;"	s
scfsi	lame/gtkanal.h	/^  int scfsi[2],mean_bits,resvsize;$/;"	m	struct:__anon7
scfsi	lame/l3side.h	/^	unsigned scfsi[2][4];$/;"	m	struct:__anon22
scfsi	lame/mpglib/mpg123.h	/^      int scfsi;$/;"	m	struct:gr_info_s
scfsi_calc	lame/takehiro.c	/^scfsi_calc(int ch,$/;"	f	file:
sendrtp	lame/rtp.c	/^int sendrtp(int fd, struct sockaddr_in *sSockAddr, struct rtpheader *foo, void *data, int len) {$/;"	f
sequence	lame/rtp.c	/^  int sequence:16;	\/* sequence number: random *\/$/;"	m	struct:rtpbits	file:
sequence	lame/rtp.h	/^  int sequence:16;	\/* sequence number: random *\/$/;"	m	struct:rtpbits
set_masking_lower	lame/quantize.c	/^set_masking_lower (int VBR_q,int nbits)$/;"	f
set_pinfo	lame/quantize.c	/^set_pinfo ($/;"	f
set_pointer	lame/mpglib/interface.c	/^int set_pointer(long backstep)$/;"	f
setcolor	lame/gpkplotting.c	/^void setcolor(GtkWidget *widget, GdkColor *color, gint red,gint green,gint blue)$/;"	f
sfBandIndex	lame/quantize-pvt.c	/^struct scalefac_struct sfBandIndex[6] =$/;"	v	typeref:struct:scalefac_struct
sf_aiff	lame/lame.h	/^	sf_unknown, sf_wave, sf_aiff, sf_mp3, sf_raw$/;"	e	enum:sound_file_format_e
sf_mp3	lame/lame.h	/^	sf_unknown, sf_wave, sf_aiff, sf_mp3, sf_raw$/;"	e	enum:sound_file_format_e
sf_raw	lame/lame.h	/^	sf_unknown, sf_wave, sf_aiff, sf_mp3, sf_raw$/;"	e	enum:sound_file_format_e
sf_unknown	lame/lame.h	/^	sf_unknown, sf_wave, sf_aiff, sf_mp3, sf_raw$/;"	e	enum:sound_file_format_e
sf_wave	lame/lame.h	/^	sf_unknown, sf_wave, sf_aiff, sf_mp3, sf_raw$/;"	e	enum:sound_file_format_e
sfb	lame/gtkanal.h	/^  double sfb[2][2][SBMAX_l];$/;"	m	struct:__anon7
sfb_lmax	lame/l3side.h	/^	unsigned sfb_lmax;$/;"	m	struct:__anon21
sfb_partition_table	lame/l3side.h	/^	unsigned *sfb_partition_table;$/;"	m	struct:__anon21
sfb_s	lame/gtkanal.h	/^  double sfb_s[2][2][3*SBMAX_s];$/;"	m	struct:__anon7
sfb_smax	lame/l3side.h	/^	unsigned sfb_smax;$/;"	m	struct:__anon21
sfbbox	lame/gtkanal.c	/^GtkWidget *sfbbox[2];    \/* scalefactors gr=0,1 plotted here *\/$/;"	v
sfblines	lame/gtkanal.c	/^  int sfblines;           \/* plot scalefactor bands in MDCT plot *\/$/;"	m	struct:gtkinfostruct	file:
shortDiff	lame/mpglib/layer3.c	/^  short shortDiff[13];$/;"	m	struct:bandInfoStruct	file:
shortIdx	lame/mpglib/layer3.c	/^  short shortIdx[14];$/;"	m	struct:bandInfoStruct	file:
shortLimit	lame/mpglib/layer3.c	/^int shortLimit[9][14];$/;"	v
side_info	lame/formatBitstream.c	/^    MYSideInfo           side_info;$/;"	m	struct:side_info_link	file:
side_info_link	lame/formatBitstream.c	/^typedef struct side_info_link$/;"	s	file:
side_info_link	lame/formatBitstream.c	/^} side_info_link;$/;"	t	typeref:struct:side_info_link	file:
side_queue_elements	lame/formatBitstream.c	/^side_queue_elements( int *frameLength, int *SILength )$/;"	f	file:
side_queue_free	lame/formatBitstream.c	/^static struct side_info_link *side_queue_free   = NULL;$/;"	v	typeref:struct:side_info_link	file:
side_queue_head	lame/formatBitstream.c	/^static struct side_info_link *side_queue_head   = NULL;$/;"	v	typeref:struct:side_info_link	file:
signum	lame/quantize.h	65;"	d
silent	lame/lame.h	/^  int silent;                 \/* disable some status output *\/$/;"	m	struct:__anon8
single	lame/mpglib/mpg123.h	/^    int single;$/;"	m	struct:frame
size	lame/mpglib/mpglib.h	/^	long size;$/;"	m	struct:buf
slen	lame/l3side.h	/^	unsigned slen[4];$/;"	m	struct:__anon21
slen1_tab	lame/l3bitstream.c	/^static unsigned slen1_tab[16] = { 0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4 };$/;"	v	file:
slen2_tab	lame/l3bitstream.c	/^static unsigned slen2_tab[16] = { 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3 };$/;"	v	file:
so_far	lame/timestatus.c	/^  FLOAT so_far;$/;"	m	struct:ts_times	file:
sound_file_format	lame/lame.h	/^} sound_file_format;$/;"	t	typeref:enum:sound_file_format_e
sound_file_format_e	lame/lame.h	/^typedef enum sound_file_format_e {$/;"	g
spec_option	lame/gtkanal.c	/^static void spec_option (GtkWidget *widget, gpointer data)$/;"	f	file:
spectrumSI	lame/formatBitstream.h	/^    BF_BitstreamPart *spectrumSI[MAX_GRANULES][MAX_CHANNELS];$/;"	m	struct:BF_FrameData
spectrumSIPH	lame/formatBitstream.c	/^    BF_PartHolder *spectrumSIPH[MAX_GRANULES][MAX_CHANNELS];$/;"	m	struct:__anon6	file:
spectrumSIPH	lame/l3bitstream.c	/^BF_PartHolder *spectrumSIPH[ MAX_GRANULES ][ MAX_CHANNELS ];$/;"	v
speed	lame/timestatus.c	/^  FLOAT speed;$/;"	m	struct:ts_times	file:
srandom	lame/mpglib/mpg123.h	22;"	d
ssrc	lame/rtp.c	/^  int ssrc;		\/* random *\/$/;"	m	struct:rtpheader	file:
ssrc	lame/rtp.h	/^  int ssrc;             \/* random *\/$/;"	m	struct:rtpheader
stderr_buff	lame/brhist.c	/^char stderr_buff[BUFSIZ];$/;"	v
steps	lame/util.h	/^    unsigned int    steps;$/;"	m	struct:__anon5
stereo	lame/gtkanal.h	/^  int framesize,stereo,js,ms_stereo,i_stereo,emph,bitrate,sampfreq,maindata;$/;"	m	struct:__anon7
stereo	lame/lame.h	/^  int stereo;                     \/* number of channels *\/$/;"	m	struct:__anon8
stereo	lame/mpglib/mpg123.h	/^    int stereo;$/;"	m	struct:frame
store_side_info	lame/formatBitstream.c	/^store_side_info( BF_FrameData *info )$/;"	f	file:
subFormatChunk	wave.h	/^} subFormatChunk;$/;"	t	typeref:struct:__anon27
sub_gain	lame/gtkanal.h	/^  int sub_gain[2][2][3];$/;"	m	struct:__anon7
subblock_draw	lame/gtkanal.c	/^static int subblock_draw[3] = { 1, 1, 1 };$/;"	v	file:
subblock_gain	lame/l3side.h	/^int \/*	unsigned *\/ subblock_gain[3];$/;"	m	struct:__anon21
subblock_gain	lame/mpglib/mpg123.h	/^      unsigned subblock_gain[3];$/;"	m	struct:gr_info_s
subdv_table	lame/takehiro.c	/^} subdv_table[ 23 ] =$/;"	v	typeref:struct:__anon18
subsmapling2to1	wave.cpp	/^void subsmapling2to1(unsigned char *input, long size, unsigned char *output)$/;"	f
swapbytes	lame/lame.h	/^  int swapbytes;              \/* force byte swapping   default=0*\/$/;"	m	struct:__anon8
synth_1to1	lame/mpglib/decode_i386.c	/^int synth_1to1(real *bandPtr,int channel,unsigned char *out,int *pnt)$/;"	f
synth_1to1_mono	lame/mpglib/decode_i386.c	/^int synth_1to1_mono(real *bandPtr,unsigned char *samples,int *pnt)$/;"	f
synth_bo	lame/mpglib/mpglib.h	/^        int  synth_bo;$/;"	m	struct:mpstr
synth_buffs	lame/mpglib/mpglib.h	/^	real synth_buffs[2][2][0x110];$/;"	m	struct:mpstr
t	lame/doc/html/switchs.html	/^    <strong>* <kbd>-t<\/kbd><a name="t">&nbsp;&nbsp;&nbsp;&nbsp;disable VBR tag<\/a><\/strong><\/dt>$/;"	a
t10HB	lame/tables.c	/^static HUFFBITS      t10HB[]   = {$/;"	v	file:
t10l	lame/tables.c	/^static unsigned char t10l[]  = {$/;"	v	file:
t11HB	lame/tables.c	/^static HUFFBITS      t11HB[]   = {$/;"	v	file:
t11l	lame/tables.c	/^static unsigned char t11l[]  = {$/;"	v	file:
t12HB	lame/tables.c	/^static HUFFBITS      t12HB[]   = {$/;"	v	file:
t12l	lame/tables.c	/^static unsigned char t12l[]  = {$/;"	v	file:
t13HB	lame/tables.c	/^static HUFFBITS      t13HB[]   = {$/;"	v	file:
t13l	lame/tables.c	/^static unsigned char t13l[]  = {$/;"	v	file:
t15HB	lame/tables.c	/^static HUFFBITS      t15HB[]   = {$/;"	v	file:
t15l	lame/tables.c	/^static unsigned char t15l[]  = {$/;"	v	file:
t16HB	lame/tables.c	/^static HUFFBITS      t16HB[]   = {$/;"	v	file:
t16l	lame/tables.c	/^static unsigned char t16l[]  = {$/;"	v	file:
t1HB	lame/tables.c	/^static HUFFBITS      t1HB[]   = {$/;"	v	file:
t1l	lame/tables.c	/^static unsigned char t1l[]  = {$/;"	v	file:
t24HB	lame/tables.c	/^static HUFFBITS      t24HB[]   = {$/;"	v	file:
t24l	lame/tables.c	/^static unsigned char t24l[]  = {$/;"	v	file:
t2HB	lame/tables.c	/^static HUFFBITS      t2HB[]   = {$/;"	v	file:
t2l	lame/tables.c	/^static unsigned char t2l[]  = {$/;"	v	file:
t32HB	lame/tables.c	/^static HUFFBITS      t32HB[]   = {$/;"	v	file:
t32l	lame/tables.c	/^static unsigned char t32l[]  = {$/;"	v	file:
t33HB	lame/tables.c	/^static HUFFBITS      t33HB[]   = {$/;"	v	file:
t33l	lame/tables.c	/^static unsigned char t33l[]  = {$/;"	v	file:
t3HB	lame/tables.c	/^static HUFFBITS      t3HB[]   = {$/;"	v	file:
t3l	lame/tables.c	/^static unsigned char t3l[]  = {$/;"	v	file:
t5HB	lame/tables.c	/^static HUFFBITS      t5HB[]   = {$/;"	v	file:
t5l	lame/tables.c	/^static unsigned char t5l[]  = {$/;"	v	file:
t6HB	lame/tables.c	/^static HUFFBITS      t6HB[]   = {$/;"	v	file:
t6l	lame/tables.c	/^static unsigned char t6l[]  = {$/;"	v	file:
t7HB	lame/tables.c	/^static HUFFBITS      t7HB[]   = {$/;"	v	file:
t7l	lame/tables.c	/^static unsigned char t7l[]  = {$/;"	v	file:
t8HB	lame/tables.c	/^static HUFFBITS      t8HB[]   = {$/;"	v	file:
t8l	lame/tables.c	/^static unsigned char t8l[]  = {$/;"	v	file:
t9HB	lame/tables.c	/^static HUFFBITS      t9HB[]   = {$/;"	v	file:
t9l	lame/tables.c	/^static unsigned char t9l[]  = {$/;"	v	file:
tab0	lame/mpglib/huffman.h	/^static short tab0[] = $/;"	v
tab1	lame/mpglib/huffman.h	/^static short tab1[] =$/;"	v
tab10	lame/mpglib/huffman.h	/^static short tab10[] =$/;"	v
tab11	lame/mpglib/huffman.h	/^static short tab11[] =$/;"	v
tab12	lame/mpglib/huffman.h	/^static short tab12[] =$/;"	v
tab13	lame/mpglib/huffman.h	/^static short tab13[] =$/;"	v
tab15	lame/mpglib/huffman.h	/^static short tab15[] =$/;"	v
tab16	lame/mpglib/huffman.h	/^static short tab16[] =$/;"	v
tab2	lame/mpglib/huffman.h	/^static short tab2[] =$/;"	v
tab24	lame/mpglib/huffman.h	/^static short tab24[] =$/;"	v
tab3	lame/mpglib/huffman.h	/^static short tab3[] =$/;"	v
tab5	lame/mpglib/huffman.h	/^static short tab5[] =$/;"	v
tab6	lame/mpglib/huffman.h	/^static short tab6[] =$/;"	v
tab7	lame/mpglib/huffman.h	/^static short tab7[] =$/;"	v
tab8	lame/mpglib/huffman.h	/^static short tab8[] =$/;"	v
tab9	lame/mpglib/huffman.h	/^static short tab9[] =$/;"	v
tab_c0	lame/mpglib/huffman.h	/^static short tab_c0[] =$/;"	v
tab_c1	lame/mpglib/huffman.h	/^static short tab_c1[] =$/;"	v
table	lame/mpglib/huffman.h	/^  short *table;$/;"	m	struct:newhuff
table	lame/tables.h	/^  HUFFBITS *table;	\/*pointer to array[xlen][ylen]		*\/$/;"	m	struct:huffcodetab
table-soundq	lame/doc/html/node6.html	/^<DIV ALIGN="CENTER"><A NAME="table-soundq">&#160;<\/A> <A NAME="95">&#160;<\/A> $/;"	a
table_select	lame/l3side.h	/^	unsigned table_select[3];$/;"	m	struct:__anon21
table_select	lame/mpglib/mpg123.h	/^      unsigned table_select[3];$/;"	m	struct:gr_info_s
tabsel_123	lame/mpglib/common.c	/^int tabsel_123[2][3][16] = {$/;"	v
tagtext	lame/id3tag.h	/^	char tagtext[128];$/;"	m	struct:__anon9
tail	lame/mpglib/mpglib.h	/^	struct buf *head,*tail;$/;"	m	struct:mpstr	typeref:struct:mpstr::
tan1_1	lame/mpglib/layer3.c	/^static real tan1_1[16],tan2_1[16],tan1_2[16],tan2_2[16];$/;"	v	file:
tan1_2	lame/mpglib/layer3.c	/^static real tan1_1[16],tan2_1[16],tan1_2[16],tan2_2[16];$/;"	v	file:
tan2_1	lame/mpglib/layer3.c	/^static real tan1_1[16],tan2_1[16],tan1_2[16],tan2_2[16];$/;"	v	file:
tan2_2	lame/mpglib/layer3.c	/^static real tan1_1[16],tan2_1[16],tan1_2[16],tan2_2[16];$/;"	v	file:
text_window	lame/gtkanal.c	/^static void text_window (GtkWidget *widget, gpointer data)$/;"	f	file:
tf_bit_reverse	fft/fft.c	/^void tf_bit_reverse(struct twinddle_factor *tf, int size)$/;"	f
tf_copy	fft/fft.c	/^int tf_copy(struct twinddle_factor *a, struct twinddle_factor *b)$/;"	f
tf_copy	fft/main.c	/^int tf_copy(struct twinddle_factor *a, struct twinddle_factor *b)$/;"	f
tf_init	fft/fft.c	/^struct twinddle_factor *tf_init(int *array, int size)$/;"	f
tf_init	fft/main.c	/^struct twinddle_factor *tf_init(double *array, int size)$/;"	f
tf_print	fft/fft.c	/^void tf_print(struct twinddle_factor *tf, int size)$/;"	f
tf_print	fft/main.c	/^void tf_print(struct twinddle_factor *tf, int size)$/;"	f
tfcos12	lame/mpglib/layer3.c	/^static real tfcos12[3];$/;"	v	file:
tfcos36	lame/mpglib/layer3.c	/^static real tfcos36[9];$/;"	v	file:
thm	lame/l3side.h	/^    III_psy_xmin thm;$/;"	m	struct:__anon20
thr	lame/gtkanal.h	/^  double thr[2][4][SBMAX_l];$/;"	m	struct:__anon7
thr_s	lame/gtkanal.h	/^  double thr_s[2][4][3*SBMAX_s];$/;"	m	struct:__anon7
timestamp	lame/rtp.c	/^  int timestamp;	\/* start: random *\/$/;"	m	struct:rtpheader	file:
timestamp	lame/rtp.h	/^  int timestamp;        \/* start: random *\/$/;"	m	struct:rtpheader
timestatus	lame/timestatus.c	/^void timestatus(int samp_rate,long frameNum,long totalframes,int framesize)$/;"	f
title	lame/id3tag.h	/^	char title[31];$/;"	m	struct:__anon9
toc	lame/VbrTag.h	/^  u_char	toc[NUMTOCENTRIES];	\/* may be NULL if toc not desired*\/$/;"	m	struct:__anon3
tot_noise	lame/gtkanal.h	/^  double tot_noise[2][2];$/;"	m	struct:__anon7
totalframes	lame/gtkanal.c	/^  int totalframes;$/;"	m	struct:gtkinfostruct	file:
totalframes	lame/lame.h	/^  long totalframes;               \/* frames: 0..totalframes-1 (estimate)*\/$/;"	m	struct:__anon8
totbit	lame/util.h	/^    unsigned long        totbit;         \/* bit counter of bit stream *\/$/;"	m	struct:bit_stream_struc
totbits	lame/gtkanal.h	/^  int totbits;$/;"	m	struct:__anon7
totemph	lame/gtkanal.c	/^  int totemph;            \/* total of frames with de-emphasis *\/$/;"	m	struct:gtkinfostruct	file:
totis	lame/gtkanal.c	/^  int totis;              \/* total frames with i_stereo *\/$/;"	m	struct:gtkinfostruct	file:
totmix	lame/gtkanal.c	/^  int totmix;             \/* total granules with mixed blocks *\/$/;"	m	struct:gtkinfostruct	file:
totms	lame/gtkanal.c	/^  int totms;              \/* total frames with ms_stereo *\/$/;"	m	struct:gtkinfostruct	file:
totshort	lame/gtkanal.c	/^  int totshort;           \/* total granules with short blocks *\/$/;"	m	struct:gtkinfostruct	file:
track	lame/id3tag.h	/^	unsigned char track;$/;"	m	struct:__anon9
tryresync	lame/mpglib/mpg123.h	/^	int tryresync;  \/* resync stream after error *\/$/;"	m	struct:parameter
ts_calc_times	lame/timestatus.c	/^void ts_calc_times(ts_times *time, int samp_rate, long frame, long frames,int framesize)$/;"	f
ts_process_time	lame/timestatus.c	/^FLOAT ts_process_time(long frame) {$/;"	f
ts_real_time	lame/timestatus.c	/^FLOAT ts_real_time(long frame) {$/;"	f
ts_times	lame/timestatus.c	/^typedef struct ts_times {$/;"	s	file:
ts_times	lame/timestatus.c	/^} ts_times;$/;"	t	typeref:struct:ts_times	file:
tt	lame/l3side.h	/^			gr_info tt;$/;"	m	struct:__anon22::__anon23::gr_info_ss
twinddle_factor	fft/fft.c	/^struct twinddle_factor$/;"	s	file:
twinddle_factor	fft/main.c	/^struct twinddle_factor$/;"	s	file:
u_char	lame/machine.h	/^	typedef unsigned char	u_char;$/;"	t
u_int	lame/machine.h	/^	typedef unsigned int	u_int;$/;"	t
u_long	lame/machine.h	/^	typedef unsigned long	u_long;$/;"	t
u_short	lame/machine.h	/^	typedef unsigned short	u_short;$/;"	t
update_progress	lame/gtkanal.c	/^static void update_progress(void)$/;"	f	file:
use_best_huffman	lame/lame.h	/^  int use_best_huffman;     \/* 0 = no.  1=outside loop  2=inside loop(slow) *\/$/;"	m	struct:__anon8
used	lame/id3tag.h	/^	int used;$/;"	m	struct:__anon9
userFrameData	lame/formatBitstream.h	/^    BF_BitstreamPart *userFrameData;$/;"	m	struct:BF_FrameData
userFrameDataPH	lame/l3bitstream.c	/^BF_PartHolder *userFrameDataPH;$/;"	v
userSpectrum	lame/formatBitstream.h	/^    BF_BitstreamPart *userSpectrum[MAX_GRANULES][MAX_CHANNELS];$/;"	m	struct:BF_FrameData
userSpectrumPH	lame/l3bitstream.c	/^BF_PartHolder *userSpectrumPH[ MAX_GRANULES ][ MAX_CHANNELS ];$/;"	v
v	lame/rtp.c	/^  int v:2;	\/* version: 2 *\/$/;"	m	struct:rtpbits	file:
v	lame/rtp.h	/^  int v:2;	\/* version: 2 *\/$/;"	m	struct:rtpbits
valid	lame/id3tag.h	/^	int valid;$/;"	m	struct:__anon9
value	lame/formatBitstream.h	/^    u_int value;$/;"	m	struct:__anon1
vbr_scale	lame/VbrTag.h	/^  int		vbr_scale;		\/* encoded vbr scale from Vbr header data*\/$/;"	m	struct:__anon3
verbose	lame/mpglib/mpg123.h	/^	int verbose;    \/* verbose level *\/$/;"	m	struct:parameter
version	lame/lame.h	/^  int version;                    \/* 0=MPEG2  1=MPEG1 *\/$/;"	m	struct:__anon8
wBitrate	lame/Dll/BladeMP3EncDLL.h	/^			WORD	wBitrate;		\/\/ 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256 and 320 allowed$/;"	m	struct:__anon11::__anon12::__anon13
wBitrate	lame/Dll/BladeMP3EncDLL.h	/^			WORD	wBitrate;$/;"	m	struct:__anon11::__anon12::__anon15
wBitsPerSample	wave.h	/^  unsigned short wBitsPerSample; \/\/ bits per sample$/;"	m	struct:__anon27
wBlockAlign	wave.h	/^  unsigned short wBlockAlign; \/\/ Block Align$/;"	m	struct:__anon27
wChannels	wave.h	/^  unsigned short wChannels; \/\/ the number of audio channels (Mono = 1, Stereo = 2, etc)$/;"	m	struct:__anon27
wFormat	wave.h	/^  long wFormat;$/;"	m	struct:__anon26
wFormatTag	wave.h	/^  short wFormatTag; \/\/ PCM = 1 , Values other than 1 indicate some form of compression $/;"	m	struct:__anon27
wYear	lame/Dll/BladeMP3EncDLL.h	/^	WORD	wYear;$/;"	m	struct:__anon16
wave_check	lame/get_audio.c	/^wave_check(char *file_name, fmt_chunk_data *wave_info)$/;"	f	file:
waveformData	wave.h	/^  unsigned char *waveformData; \/\/ PCM 데이터$/;"	m	struct:__anon29
win	lame/mpglib/layer3.c	/^static real win[4][36];$/;"	v	file:
win	lame/newmdct.c	/^static FLOAT8 win[4][36];$/;"	v	file:
win1	lame/mpglib/layer3.c	/^static real win1[4][36];$/;"	v	file:
winbox	lame/gtkanal.c	/^GtkWidget *winbox;       \/* mpg123 synthesis data plotted here *\/$/;"	v
window	lame/fft.c	/^static FLOAT window[BLKSIZE \/ 2], window_s[BLKSIZE_s \/ 2];$/;"	v	file:
window	lame/gtkanal.c	/^GtkWidget *window;$/;"	v
window_s	lame/fft.c	/^static FLOAT window[BLKSIZE \/ 2], window_s[BLKSIZE_s \/ 2];$/;"	v	file:
window_subband	lame/newmdct.c	/^static void window_subband(short *xk, FLOAT8 d[SBLIMIT], FLOAT8 *in)$/;"	f	file:
window_switching_flag	lame/l3side.h	/^	unsigned window_switching_flag;$/;"	m	struct:__anon21
wordpointer	lame/mpglib/common.c	/^unsigned char *wordpointer;$/;"	v
work	lame/newmdct.c	130;"	d	file:
writePartMainData	lame/formatBitstream.c	/^writePartMainData( BF_BitstreamPart *part, BF_FrameResults *results )$/;"	f	file:
writePartSideInfo	lame/formatBitstream.c	/^writePartSideInfo( BF_BitstreamPart *part, BF_FrameResults *results )$/;"	f	file:
write_audio	wave.cpp	/^int write_audio(struct audio *ap, const char *tmp)$/;"	f
write_do	wave.cpp	/^void write_do()$/;"	f
write_mod_samplingrate	wave.cpp	/^long write_mod_samplingrate(struct audio *ap, float rate)$/;"	f
write_mod_samplingrate	wave.cpp	/^void write_mod_samplingrate()$/;"	f
write_noise	wave.cpp	/^void write_noise()$/;"	f
write_side_info	lame/formatBitstream.c	/^write_side_info(void)$/;"	f	file:
x	lame/doc/html/switchs.html	/^  <dt><strong>* <kbd>-x<\/kbd><a name="x">&nbsp;&nbsp;&nbsp;&nbsp;swapbytes<\/a><\/strong> $/;"	a
x	lame/rtp.c	/^  int x:1;	\/* number of extension headers: 0 *\/$/;"	m	struct:rtpbits	file:
x	lame/rtp.h	/^  int x:1;	\/* number of extension headers: 0 *\/$/;"	m	struct:rtpbits
xfsf	lame/gtkanal.h	/^  double xfsf[2][2][SBMAX_l];$/;"	m	struct:__anon7
xfsf_s	lame/gtkanal.h	/^  double xfsf_s[2][2][3*SBMAX_s];$/;"	m	struct:__anon7
xlen	lame/tables.h	/^  unsigned int xlen; 	\/*max. x-index+			      	*\/ $/;"	m	struct:huffcodetab
xr	lame/gtkanal.h	/^  double xr[2][2][576];$/;"	m	struct:__anon7
year	lame/id3tag.h	/^	char year[5];$/;"	m	struct:__anon9
zHomepage	lame/Dll/BladeMP3EncDLL.h	/^	CHAR	zHomepage[BE_MAX_HOMEPAGE + 1];	$/;"	m	struct:__anon16
